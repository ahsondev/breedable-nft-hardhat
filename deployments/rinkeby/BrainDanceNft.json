{
  "address": "0x80464344E60121b7327Ae43F61a37CEB0A756A2A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "BreededNewNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "MintedNewNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pause",
          "type": "bool"
        }
      ],
      "name": "PauseEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ABC_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ARTIST_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INITIAL_TOKEN_COUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "breedPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "array",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "val",
          "type": "uint256"
        }
      ],
      "name": "findIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "getChildren",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "traits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fatherId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "motherId",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "childrenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct HeroFactory.Hero[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "heroId1_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "heroId2_",
          "type": "uint256"
        }
      ],
      "name": "getChildrenIdsWithParent",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "heroId1_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "heroId2_",
          "type": "uint256"
        }
      ],
      "name": "getChildrenWithParent",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "traits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fatherId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "motherId",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "childrenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct HeroFactory.Hero[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "getHero",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "traits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fatherId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "motherId",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "childrenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct HeroFactory.Hero",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "getParent",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "traits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fatherId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "motherId",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "childrenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct HeroFactory.Hero[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPresale",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "string",
          "name": "leaf",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "signature",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenUri_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "heroId1_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "heroId2_",
          "type": "uint256"
        }
      ],
      "name": "mintBreedToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "count_",
          "type": "uint256"
        }
      ],
      "name": "mintUnsoldTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintedInitialTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remainTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "name": "setBaseUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setBreedPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "pause",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root_",
          "type": "bytes32"
        }
      ],
      "name": "setRootAuth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root_",
          "type": "bytes32"
        }
      ],
      "name": "setRootWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        }
      ],
      "name": "setSignatureToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setStarttime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "signature",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "heroTraits_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "cIds_",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "reset_",
          "type": "bool"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenUri_",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setUpgradePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upgradePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9301fd6c7241092219d6c22f5f04d05385e4c10b4270720078d64ddc5a5bc043",
  "receipt": {
    "to": null,
    "from": "0xA5DBC34d69B745d5ee9494E6960a811613B9ae32",
    "contractAddress": "0x80464344E60121b7327Ae43F61a37CEB0A756A2A",
    "transactionIndex": 33,
    "gasUsed": "5270115",
    "logsBloom": "0x
    "blockHash": "0x8d2bc3ba00c24cf89aff51d30637ec6e87350380743d9c58fa0160aea2abd07d",
    "transactionHash": "0x9301fd6c7241092219d6c22f5f04d05385e4c10b4270720078d64ddc5a5bc043",
    "logs": [
      {
        "transactionIndex": 33,
        "blockNumber": 9824637,
        "transactionHash": "0x9301fd6c7241092219d6c22f5f04d05385e4c10b4270720078d64ddc5a5bc043",
        "address": "0x80464344E60121b7327Ae43F61a37CEB0A756A2A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a5dbc34d69b745d5ee9494e6960a811613b9ae32"
        ],
        "data": "0x",
        "logIndex": 63,
        "blockHash": "0x8d2bc3ba00c24cf89aff51d30637ec6e87350380743d9c58fa0160aea2abd07d"
      },
      {
        "transactionIndex": 33,
        "blockNumber": 9824637,
        "transactionHash": "0x9301fd6c7241092219d6c22f5f04d05385e4c10b4270720078d64ddc5a5bc043",
        "address": "0x80464344E60121b7327Ae43F61a37CEB0A756A2A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000396823f49aa9f0e3fac4b939bc27ad5cd88264db",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 64,
        "blockHash": "0x8d2bc3ba00c24cf89aff51d30637ec6e87350380743d9c58fa0160aea2abd07d"
      },
      {
        "transactionIndex": 33,
        "blockNumber": 9824637,
        "transactionHash": "0x9301fd6c7241092219d6c22f5f04d05385e4c10b4270720078d64ddc5a5bc043",
        "address": "0x80464344E60121b7327Ae43F61a37CEB0A756A2A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000516dbdc188213e01f625bc3d8ef87df48eb68c53",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 65,
        "blockHash": "0x8d2bc3ba00c24cf89aff51d30637ec6e87350380743d9c58fa0160aea2abd07d"
      },
      {
        "transactionIndex": 33,
        "blockNumber": 9824637,
        "transactionHash": "0x9301fd6c7241092219d6c22f5f04d05385e4c10b4270720078d64ddc5a5bc043",
        "address": "0x80464344E60121b7327Ae43F61a37CEB0A756A2A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000892e10cb1299c16e469cf0f79f18cca639d00f5b",
          "0x0000000000000000000000000000000000000000000000000000000000000002"
        ],
        "data": "0x",
        "logIndex": 66,
        "blockHash": "0x8d2bc3ba00c24cf89aff51d30637ec6e87350380743d9c58fa0160aea2abd07d"
      }
    ],
    "blockNumber": 9824637,
    "cumulativeGasUsed": "17753482",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "BD 121601",
    "BD121601",
    "https://gateway.pinata.cloud/ipfs/QmSeY3cFvdjHp2fKYwFSvMJpaSzdjZVotbnYmMyifLNCTp/"
  ],
  "solcInputHash": "97f8b44176a811e643281b00268f241a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BreededNewNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MintedNewNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"PauseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ABC_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ARTIST_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_TOKEN_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"breedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"array\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"findIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getChildren\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"traits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fatherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"motherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"childrenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct HeroFactory.Hero[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"heroId1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"heroId2_\",\"type\":\"uint256\"}],\"name\":\"getChildrenIdsWithParent\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"heroId1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"heroId2_\",\"type\":\"uint256\"}],\"name\":\"getChildrenWithParent\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"traits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fatherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"motherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"childrenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct HeroFactory.Hero[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getHero\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"traits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fatherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"motherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"childrenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct HeroFactory.Hero\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getParent\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"traits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fatherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"motherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"childrenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct HeroFactory.Hero[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"string\",\"name\":\"leaf\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signature\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenUri_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"heroId1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"heroId2_\",\"type\":\"uint256\"}],\"name\":\"mintBreedToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count_\",\"type\":\"uint256\"}],\"name\":\"mintUnsoldTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedInitialTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setBreedPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root_\",\"type\":\"bytes32\"}],\"name\":\"setRootAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root_\",\"type\":\"bytes32\"}],\"name\":\"setRootWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"setSignatureToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setStarttime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signature\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"heroTraits_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"cIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"reset_\",\"type\":\"bool\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenUri_\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setUpgradePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BrainDanceNft.sol\":\"BrainDanceNft\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/BrainDanceNft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"./HeroFactory.sol\\\";\\r\\n\\r\\ncontract BrainDanceNft is ERC721Enumerable, Ownable, HeroFactory {\\r\\n    using SafeMath for uint256;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // initial token count\\r\\n    uint256 public constant INITIAL_TOKEN_COUNT = 10101;\\r\\n\\r\\n    // initial token price\\r\\n    uint256 public mintPrice = 0.07 ether;\\r\\n    uint256 public breedPrice = 0 ether;\\r\\n    uint256 public upgradePrice = 0 ether;\\r\\n    \\r\\n    // creator's addresses\\r\\n    address public constant ABC_ADDRESS = 0x516DBdc188213e01f625bC3d8Ef87Df48EB68C53;\\r\\n    address public constant ARTIST_ADDRESS = 0x892E10CB1299C16e469cf0f79f18CCa639D00F5B;\\r\\n    address public constant OWNER_ADDRESS = 0x396823F49AA9f0e3FAC4b939Bc27aD5cD88264Db;\\r\\n\\r\\n    // whitelist\\r\\n    uint public startTime;\\r\\n\\r\\n    // if true, stops minting\\r\\n    bool public bPaused = true;\\r\\n\\r\\n    // token's URI\\r\\n    mapping (uint256 => string) private _tokenUris;\\r\\n    string public baseURI;\\r\\n\\r\\n    uint256 public mintedInitialTokenCount = 0;\\r\\n\\r\\n    // breed tokens\\r\\n    uint256 private breedTokenCount = 0;\\r\\n\\r\\n    // merkle tree\\r\\n    bytes32 private _rootWhitelist = 0;\\r\\n    bytes32 private _rootAuth = 0;\\r\\n\\r\\n    // signature\\r\\n    uint256 private _signatureToken = 0;\\r\\n\\r\\n    // events\\r\\n    event PauseEvent(bool pause);\\r\\n    event MintedNewNFT(uint256 indexed tokenId);\\r\\n    event BreededNewNFT(uint256 indexed tokenId);\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_, string memory baseURI_) ERC721(name_, symbol_) {\\r\\n        // mark start time for whitelist\\r\\n        startTime = block.timestamp;\\r\\n        baseURI = baseURI_;\\r\\n\\r\\n        // should mint #00000\\r\\n        _tokenUris[0] = string(abi.encodePacked(baseURI, \\\"0\\\"));\\r\\n        _mintHero(0);\\r\\n        _safeMint(OWNER_ADDRESS, 0);\\r\\n\\r\\n        // should mint #00001\\r\\n        _tokenUris[1] = string(abi.encodePacked(baseURI, \\\"1\\\"));\\r\\n        _mintHero(1);\\r\\n        _safeMint(ABC_ADDRESS, 1);\\r\\n\\r\\n        // should mint #00002\\r\\n        _tokenUris[2] = string(abi.encodePacked(baseURI, \\\"2\\\"));\\r\\n        _mintHero(2);\\r\\n        _safeMint(ARTIST_ADDRESS, 2);\\r\\n        mintedInitialTokenCount += 3;\\r\\n    }\\r\\n\\r\\n    // ---------------- Begin interface ------------------------------------------------------------\\r\\n\\r\\n    function remainTokenCount() public view returns (uint256) {\\r\\n        return INITIAL_TOKEN_COUNT - mintedInitialTokenCount;\\r\\n    }\\r\\n\\r\\n    function mint(bytes32[] memory proof, string memory leaf) public payable {\\r\\n        require(!bPaused, \\\"Sale Paused\\\");\\r\\n        if (isPresale()) {\\r\\n            require(verifyCode(keccak256(abi.encodePacked(msg.sender)), proof) == _rootWhitelist, \\\"Address is not included in whiteList\\\");\\r\\n        } else {\\r\\n            require(verifyCode(keccak256(abi.encodePacked(leaf)), proof) == _rootAuth, \\\"Not authenticated\\\");\\r\\n        }\\r\\n        require(mintedInitialTokenCount < INITIAL_TOKEN_COUNT, \\\"Max limit\\\");\\r\\n        require(msg.value >= mintPrice, \\\"Value below price\\\");\\r\\n\\r\\n        _mintHero(mintedInitialTokenCount);\\r\\n        _safeMint(msg.sender, mintedInitialTokenCount);\\r\\n        emit MintedNewNFT(mintedInitialTokenCount);\\r\\n        mintedInitialTokenCount += 1;\\r\\n    }\\r\\n\\r\\n    function walletOfOwner(address owner) external view returns (uint256[] memory) {\\r\\n        uint256 tokenCount = balanceOf(owner);\\r\\n        uint256[] memory tokensId = new uint256[](tokenCount);\\r\\n        uint256 iToken = 0;\\r\\n        uint256 total = totalSupply();\\r\\n        for (uint256 i = 0; i < total; i++) {\\r\\n            if (ownerOf(tokenByIndex(i)) == owner) {\\r\\n                tokensId[iToken++] = tokenByIndex(i);\\r\\n            }\\r\\n        }\\r\\n        return tokensId;\\r\\n    }\\r\\n\\r\\n    function mintUnsoldTokens(address to_, uint256 count_) external {\\r\\n        require(msg.sender == ABC_ADDRESS || msg.sender == owner(), \\\"You don't have withdrawing priviledge\\\");\\r\\n        require(mintedInitialTokenCount < INITIAL_TOKEN_COUNT, \\\"No unsold tokens\\\");\\r\\n\\r\\n        uint256 end = mintedInitialTokenCount + count_;\\r\\n        if (end > INITIAL_TOKEN_COUNT) {\\r\\n            end = INITIAL_TOKEN_COUNT;\\r\\n        }\\r\\n        for (uint256 i = mintedInitialTokenCount; i < end; i++) {\\r\\n            _mintHero(i);\\r\\n            _safeMint(to_, i);\\r\\n        }\\r\\n        mintedInitialTokenCount = end;\\r\\n    }\\r\\n\\r\\n    function mintBreedToken(\\r\\n        uint256 signature\\r\\n        , string memory tokenUri_\\r\\n        , uint256 heroId1_\\r\\n        , uint256 heroId2_\\r\\n    ) public payable {\\r\\n        require(!bPaused, \\\"Breed Paused\\\");\\r\\n        require(verifySignature(signature), \\\"permission error\\\");\\r\\n        require(heroId1_ != heroId2_ && ownerOf(heroId1_) == msg.sender && ownerOf(heroId2_) == msg.sender, \\\"Parents error\\\");\\r\\n        require(msg.value >= breedPrice, \\\"Value below price\\\");\\r\\n        uint256 tokenId = breedTokenCount + INITIAL_TOKEN_COUNT;\\r\\n        _breedHero(heroId1_, heroId2_, tokenId);\\r\\n        _safeMint(msg.sender, tokenId);\\r\\n        _tokenUris[tokenId] = tokenUri_;\\r\\n        breedTokenCount += 1;\\r\\n        emit BreededNewNFT(tokenId);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n        bytes memory tempEmptyStringTest = bytes(_tokenUris[tokenId]);\\r\\n        if (tempEmptyStringTest.length == 0) {\\r\\n            return string(abi.encodePacked(baseURI, tokenId.toString()));\\r\\n        }\\r\\n        return _tokenUris[tokenId];\\r\\n    }\\r\\n\\r\\n    function isPresale() public view returns (bool) {\\r\\n        return (block.timestamp <= startTime + 24 hours);\\r\\n    }\\r\\n\\r\\n    // ---------------- End interface ------------------------------------------------------------\\r\\n\\r\\n\\r\\n    // ---------------- Begin Admin ------------------------------------------------------------\\r\\n\\r\\n    function withdrawAll() external {\\r\\n        require(msg.sender == ABC_ADDRESS || msg.sender == OWNER_ADDRESS || msg.sender == owner(), \\\"You don't have withdrawing priviledge\\\");\\r\\n        uint256 balance = address(this).balance;\\r\\n        require(balance >= 10000000000, \\\"Balance is too small\\\");\\r\\n        uint256 balance_5p = balance.mul(5).div(100);\\r\\n        _widthdraw(ABC_ADDRESS, balance_5p);\\r\\n        _widthdraw(OWNER_ADDRESS, balance - balance_5p - 1000);\\r\\n    }\\r\\n\\r\\n    function _widthdraw(address _address, uint256 _amount) private {\\r\\n        (bool success, ) = _address.call{value: _amount}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed.\\\");\\r\\n    }\\r\\n\\r\\n    function setBaseUri(string memory uri_) external onlyOwner {\\r\\n        baseURI = uri_;\\r\\n    }\\r\\n\\r\\n    function setTokenURI(uint256 tokenId_, string memory tokenUri_) external onlyOwner {\\r\\n        _tokenUris[tokenId_] = tokenUri_;\\r\\n    }\\r\\n\\r\\n    function setPause(bool pause) external onlyOwner {\\r\\n        bPaused = pause;\\r\\n        emit PauseEvent(bPaused);\\r\\n    }\\r\\n\\r\\n    function setStarttime() external onlyOwner {\\r\\n        startTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function setRootWhitelist(bytes32 root_) external onlyOwner {\\r\\n        _rootWhitelist = root_;\\r\\n    }\\r\\n    \\r\\n    function setRootAuth(bytes32 root_) external onlyOwner {\\r\\n        _rootAuth = root_;\\r\\n    }\\r\\n\\r\\n    function setMintPrice(uint256 price) external onlyOwner {\\r\\n        mintPrice = price;\\r\\n    }\\r\\n\\r\\n    function setBreedPrice(uint256 price) external onlyOwner {\\r\\n        breedPrice = price;\\r\\n    }\\r\\n\\r\\n    function setUpgradePrice(uint256 price) external onlyOwner {\\r\\n        upgradePrice = price;\\r\\n    }\\r\\n\\r\\n    function setSignatureToken(uint256 token) external onlyOwner {\\r\\n        _signatureToken = token;\\r\\n    }\\r\\n\\r\\n    function setToken(uint256 signature\\r\\n        , uint256 tokenId_\\r\\n        , string memory uri_\\r\\n        , uint256 heroTraits_\\r\\n        , uint256 fId_\\r\\n        , uint256 mId_\\r\\n        , uint256[] memory cIds_\\r\\n        , bool reset_\\r\\n    ) external payable {\\r\\n        bool bOwner = (msg.sender == ABC_ADDRESS || msg.sender == owner());\\r\\n        require(_exists(tokenId_), \\\"token not exist\\\");\\r\\n        require(bOwner || (ownerOf(tokenId_) == msg.sender && verifySignature(signature)), \\\"permission error\\\");\\r\\n        require(bOwner || msg.value >= breedPrice, \\\"Value below price\\\");\\r\\n\\r\\n        bytes memory tempEmptyStringTest = bytes(uri_);\\r\\n        if (tempEmptyStringTest.length > 0) {\\r\\n            _tokenUris[tokenId_] = uri_;\\r\\n        }\\r\\n\\r\\n        _setHero(tokenId_, heroTraits_, fId_, mId_, cIds_, reset_ && bOwner);\\r\\n    }\\r\\n\\r\\n    // ---------------- End Admin ------------------------------------------------------------\\r\\n\\r\\n    // ----------------- Begin Private functions ---------------------------------------------\\r\\n\\r\\n    function verifyCode(bytes32 leaf, bytes32[] memory proof) private pure returns (bytes32) {\\r\\n        bytes32 computedHash = leaf;\\r\\n        for (uint256 i = 0; i < proof.length; i++) {\\r\\n            bytes32 proofElement = proof[i];\\r\\n            if (computedHash < proofElement) {\\r\\n                // Hash(current computed hash + current element of the proof)\\r\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\r\\n            } else {\\r\\n                // Hash(current element of the proof + current computed hash)\\r\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\r\\n            }\\r\\n        }\\r\\n        return computedHash;\\r\\n    }\\r\\n\\r\\n    function verifySignature(uint256 signature) private view returns (bool) {\\r\\n        uint256 m = signature * signature % _signatureToken;\\r\\n        uint256 delta = block.timestamp - m * signature % _signatureToken;\\r\\n        return (delta < 120);\\r\\n    }\\r\\n\\r\\n    // ----------------- End Private functions ---------------------------------------------\\r\\n}\\r\\n\",\"keccak256\":\"0x4f6aa462699cff3eee83b6e89ac669c6f10ee4a6c9d71a834b8cb9d56673274d\",\"license\":\"MIT\"},\"contracts/HeroFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract HeroFactory {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    struct Hero {\\r\\n        uint256 traits;\\r\\n        // ancestor\\r\\n        uint256 fatherId;\\r\\n        uint256 motherId;\\r\\n        uint256[] childrenIds;\\r\\n    }\\r\\n\\r\\n    mapping (uint256 => Hero) internal _heros;\\r\\n\\r\\n    uint256 constant MAX_INT = 2**256 - 1;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function _mintHero(uint256 tokenId_) internal {\\r\\n        _heros[tokenId_] = Hero(0, MAX_INT, MAX_INT, new uint256[](0));\\r\\n    }\\r\\n\\r\\n    function _breedHero(uint256 heroId1_, uint256 heroId2_, uint256 tokenId_) internal {\\r\\n        // create a child\\r\\n        _heros[tokenId_] = Hero(0, heroId1_, heroId2_, new uint256[](0));\\r\\n\\r\\n        // add child id\\r\\n        _heros[heroId1_].childrenIds.push(tokenId_);\\r\\n        _heros[heroId2_].childrenIds.push(tokenId_);\\r\\n    }\\r\\n\\r\\n    function _setHero(uint256 tokenId_, uint256 traits, uint256 fatherId, uint256 motherId, uint256[] memory childrenIds, bool reset) internal {\\r\\n        _heros[tokenId_].traits = traits;\\r\\n        if (reset) {\\r\\n            _heros[tokenId_].fatherId = fatherId;\\r\\n            _heros[tokenId_].motherId = motherId;\\r\\n            _heros[tokenId_].childrenIds = childrenIds;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getHero(uint256 tokenId_) external view returns (Hero memory) {\\r\\n        return _heros[tokenId_];\\r\\n    }\\r\\n\\r\\n    function getParent(uint256 tokenId_) external view returns (Hero[] memory) {\\r\\n        Hero[] memory parent;\\r\\n        Hero storage hero = _heros[tokenId_];\\r\\n        if (hero.fatherId != MAX_INT) {\\r\\n            parent = new Hero[](2);\\r\\n            parent[0] = _heros[hero.fatherId];\\r\\n            parent[1] = _heros[hero.motherId];\\r\\n        }\\r\\n        return parent;\\r\\n    }\\r\\n\\r\\n    function getChildren(uint256 tokenId_) external view returns (Hero[] memory) {\\r\\n        Hero storage hero = _heros[tokenId_];\\r\\n        Hero[] memory children = new Hero[](hero.childrenIds.length);\\r\\n        for (uint i = 0; i < hero.childrenIds.length; i += 1) {\\r\\n            children[i] = _heros[hero.childrenIds[i]];\\r\\n        }\\r\\n        return children;\\r\\n    }\\r\\n\\r\\n    function getChildrenIdsWithParent(uint256 heroId1_, uint256 heroId2_) public view returns (uint256[] memory) {\\r\\n        Hero storage hero1 = _heros[heroId1_];\\r\\n        uint256 count = 0;\\r\\n        uint256[] memory ret = new uint256[](hero1.childrenIds.length);\\r\\n        count = 0;\\r\\n        for (uint i = 0; i < hero1.childrenIds.length; i += 1) {\\r\\n            if (findIndex(_heros[heroId2_].childrenIds, hero1.childrenIds[i]) < _heros[heroId2_].childrenIds.length) {\\r\\n                ret[count++] = hero1.childrenIds[i];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256[] memory ret1 = new uint256[](count);\\r\\n        count = 0;\\r\\n        for (uint i = 0; i < ret.length; i += 1) {\\r\\n            ret1[i] = ret[i];\\r\\n        }\\r\\n\\r\\n        return ret1;\\r\\n    }\\r\\n\\r\\n    function getChildrenWithParent(uint256 heroId1_, uint256 heroId2_) external view returns (Hero[] memory) {\\r\\n        uint256[] memory ids = getChildrenIdsWithParent(heroId1_, heroId2_);\\r\\n        Hero[] memory ret = new Hero[](ids.length);\\r\\n        for (uint i = 0; i < ids.length; i += 1) {\\r\\n            ret[i] = _heros[ids[i]];\\r\\n        }\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    function findIndex(uint256[] memory array, uint256 val) public pure returns (uint256) {\\r\\n        for (uint i = 0; i < array.length; i += 1) {\\r\\n            if (array[i] == val) {\\r\\n                return i;\\r\\n            }\\r\\n        }\\r\\n        return array.length;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x74de90ace7da13c954570e5361ad1732aa95a51b869ac55aa1047eda8a82a044\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106103555760003560e01c80636817c76c116101bb57806395d89b41116100f7578063d440b4c211610095578063f0a65d1a1161006f578063f0a65d1a14610908578063f2fde38b1461091d578063f4a0a5281461093d578063fc805d941461095d57610355565b8063d440b4c2146108a8578063e985e9c5146108c8578063eda9d474146108e857610355565b8063b88d4fde116100d1578063b88d4fde14610835578063bedb86fb14610855578063c4b5aa9614610875578063c87b56dd1461088857610355565b806395d89b41146107e0578063a0bcfc7f146107f5578063a22cb4651461081557610355565b806371beeba111610164578063853828b61161013e578063853828b61461078c5780638d041988146107a15780638da5cb5b146107b657806395364a84146107cb57610355565b806371beeba114610742578063755cb2341461076257806378e979251461077757610355565b80636d099e0d116101955780636d099e0d146106fa57806370a082311461070d578063715018a61461072d57610355565b80636817c76c146106bb5780636c0360eb146106d05780636c26eab9146106e557610355565b806323b872dd11610295578063438b6300116102335780634f6ccce71161020d5780634f6ccce71461064657806355834ab114610666578063594ebab7146106865780636352211e1461069b57610355565b8063438b6300146105e657806349ae8dc3146106065780634b951cef1461062657610355565b80632f745c591161026f5780632f745c59146105595780633d99de8514610579578063414533de1461059957806342842e0e146105c657610355565b806323b872dd1461050f578063287ad39f1461052f5780632a5f510e1461054457610355565b8063095ea7b311610302578063162094c4116102dc578063162094c41461048b57806318160ddd146104ab5780632099eaa7146104cd57806321d80111146104e257610355565b8063095ea7b3146104295780630970eaa31461044957806311319b1e1461047657610355565b806306c18a311161033357806306c18a31146103c557806306fdde03146103e7578063081812fc1461040957610355565b806301ffc9a71461035a578063026376031461039057806304c88161146103b2575b600080fd5b34801561036657600080fd5b5061037a610375366004613b44565b61097d565b6040516103879190613ff1565b60405180910390f35b34801561039c57600080fd5b506103b06103ab3660046139ef565b6109db565b005b6103b06103c0366004613c60565b610ad1565b3480156103d157600080fd5b506103da610c19565b6040516103879190613ef6565b3480156103f357600080fd5b506103fc610c31565b6040516103879190613ffc565b34801561041557600080fd5b506103da610424366004613b2c565b610cc3565b34801561043557600080fd5b506103b06104443660046139ef565b610d13565b34801561045557600080fd5b50610469610464366004613c3f565b610ddf565b6040516103879190613fde565b34801561048257600080fd5b5061037a61104b565b34801561049757600080fd5b506103b06104a6366004613baf565b611054565b3480156104b757600080fd5b506104c06110cc565b6040516103879190614927565b3480156104d957600080fd5b506103da6110d2565b3480156104ee57600080fd5b506105026104fd366004613b2c565b6110ea565b6040516103879190614914565b34801561051b57600080fd5b506103b061052a366004613912565b611181565b34801561053b57600080fd5b506104c06111b9565b34801561055057600080fd5b506104c06111bf565b34801561056557600080fd5b506104c06105743660046139ef565b6111c5565b34801561058557600080fd5b506104c0610594366004613acf565b611224565b3480156105a557600080fd5b506105b96105b4366004613b2c565b611282565b6040516103879190613f60565b3480156105d257600080fd5b506103b06105e1366004613912565b611483565b3480156105f257600080fd5b506104696106013660046138c6565b61149e565b34801561061257600080fd5b506105b9610621366004613b2c565b6115b7565b34801561063257600080fd5b506103b0610641366004613b2c565b611745565b34801561065257600080fd5b506104c0610661366004613b2c565b6117a3565b34801561067257600080fd5b506103b0610681366004613b2c565b6117fe565b34801561069257600080fd5b506103da61185c565b3480156106a757600080fd5b506103da6106b6366004613b2c565b611874565b3480156106c757600080fd5b506104c06118b6565b3480156106dc57600080fd5b506103fc6118bc565b3480156106f157600080fd5b506104c061194a565b6103b0610708366004613bea565b611950565b34801561071957600080fd5b506104c06107283660046138c6565b611abf565b34801561073957600080fd5b506103b0611b1d565b34801561074e57600080fd5b506103b061075d366004613b2c565b611b82565b34801561076e57600080fd5b506104c0611be0565b34801561078357600080fd5b506104c0611be6565b34801561079857600080fd5b506103b0611bec565b3480156107ad57600080fd5b506104c0611d10565b3480156107c257600080fd5b506103da611d27565b3480156107d757600080fd5b5061037a611d43565b3480156107ec57600080fd5b506103fc611d5e565b34801561080157600080fd5b506103b0610810366004613b7c565b611d6d565b34801561082157600080fd5b506103b06108303660046139c6565b611dd9565b34801561084157600080fd5b506103b061085036600461394d565b611ef9565b34801561086157600080fd5b506103b0610870366004613b12565b611f38565b6103b0610883366004613a18565b611ffe565b34801561089457600080fd5b506103fc6108a3366004613b2c565b61215b565b3480156108b457600080fd5b506103b06108c3366004613b2c565b6122f7565b3480156108d457600080fd5b5061037a6108e33660046138e0565b612355565b3480156108f457600080fd5b506105b9610903366004613c3f565b612390565b34801561091457600080fd5b506103b0612513565b34801561092957600080fd5b506103b06109383660046138c6565b612572565b34801561094957600080fd5b506103b0610958366004613b2c565b61260a565b34801561096957600080fd5b506103b0610978366004613b2c565b612668565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d630000000000000000000000000000000000000000000000000000000014806109d357506109d3826126cc565b90505b919050565b3373516dbdc188213e01f625bc3d8ef87df48eb68c531480610a2f5750610a00611d27565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610a545760405162461bcd60e51b8152600401610a4b906148b7565b60405180910390fd5b61277560135410610a775760405162461bcd60e51b8152600401610a4b90614541565b600081601354610a87919061498a565b9050612775811115610a9857506127755b6013545b81811015610ac957610aad8161276e565b610ab7848261285f565b80610ac181614a71565b915050610a9c565b506013555050565b60003373516dbdc188213e01f625bc3d8ef87df48eb68c531480610b275750610af8611d27565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b9050610b3288612879565b610b4e5760405162461bcd60e51b8152600401610a4b90614667565b8080610b86575033610b5f89611874565b73ffffffffffffffffffffffffffffffffffffffff16148015610b865750610b86896128a3565b610ba25760405162461bcd60e51b8152600401610a4b90614296565b8080610bb05750600d543410155b610bcc5760405162461bcd60e51b8152600401610a4b9061469e565b8651879015610bf65760008981526011602090815260409091208951610bf4928b0190613696565b505b610c0d8988888888888015610c085750875b6128f1565b50505050505050505050565b73396823f49aa9f0e3fac4b939bc27ad5cd88264db81565b606060008054610c4090614a36565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6c90614a36565b8015610cb95780601f10610c8e57610100808354040283529160200191610cb9565b820191906000526020600020905b815481529060010190602001808311610c9c57829003601f168201915b5050505050905090565b6000610cce82612879565b610cea5760405162461bcd60e51b8152600401610a4b906144e4565b5060009081526004602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6000610d1e82611874565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610d6c5760405162461bcd60e51b8152600401610a4b906146d5565b8073ffffffffffffffffffffffffffffffffffffffff16610d8b612945565b73ffffffffffffffffffffffffffffffffffffffff161480610db45750610db4816108e3612945565b610dd05760405162461bcd60e51b8152600401610a4b9061432a565b610dda8383612949565b505050565b6000828152600b60205260408120600381015460609290819067ffffffffffffffff811115610e1e57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610e47578160200160208202803683370190505b5090506000915060005b6003840154811015610f73576000868152600b6020908152604091829020600301805483518184028101840190945280845292610ef4929091908490830182828015610ebc57602002820191906000526020600020905b815481526020019060010190808311610ea8575b5050505050866003018481548110610ee457634e487b7160e01b600052603260045260246000fd5b9060005260206000200154611224565b1015610f6157836003018181548110610f1d57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154828480610f3490614a71565b955081518110610f5457634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b610f6c60018261498a565b9050610e51565b5060008267ffffffffffffffff811115610f9d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610fc6578160200160208202803683370190505b5090506000925060005b825181101561103e57828181518110610ff957634e487b7160e01b600052603260045260246000fd5b602002602001015182828151811061102157634e487b7160e01b600052603260045260246000fd5b602090810291909101015261103760018261498a565b9050610fd0565b5093505050505b92915050565b60105460ff1681565b61105c612945565b73ffffffffffffffffffffffffffffffffffffffff1661107a611d27565b73ffffffffffffffffffffffffffffffffffffffff16146110ad5760405162461bcd60e51b8152600401610a4b90614578565b60008281526011602090815260409091208251610dda92840190613696565b60085490565b73892e10cb1299c16e469cf0f79f18cca639d00f5b81565b6110f261371a565b6000828152600b6020908152604091829020825160808101845281548152600182015481840152600282015481850152600382018054855181860281018601909652808652919492936060860193929083018282801561117157602002820191906000526020600020905b81548152602001906001019080831161115d575b5050505050815250509050919050565b61119261118c612945565b826129e9565b6111ae5760405162461bcd60e51b8152600401610a4b906147fd565b610dda838383612aa2565b600e5481565b600d5481565b60006111d083611abf565b82106111ee5760405162461bcd60e51b8152600401610a4b90614046565b5073ffffffffffffffffffffffffffffffffffffffff919091166000908152600660209081526040808320938352929052205490565b6000805b8351811015611279578284828151811061125257634e487b7160e01b600052603260045260246000fd5b60200260200101511415611267579050611045565b61127260018261498a565b9050611228565b50509051919050565b6000818152600b60205260409020600181015460609182917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1461147c576040805160028082526060820190925290816020015b6112de61371a565b8152602001906001900390816112d6579050509150600b6000826001015481526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820180548060200260200160405190810160405280929190818152602001828054801561138257602002820191906000526020600020905b81548152602001906001019080831161136e575b505050505081525050826000815181106113ac57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250600b6000826002015481526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820180548060200260200160405190810160405280929190818152602001828054801561144657602002820191906000526020600020905b815481526020019060010190808311611432575b5050505050815250508260018151811061147057634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b5092915050565b610dda83838360405180602001604052806000815250611ef9565b606060006114ab83611abf565b905060008167ffffffffffffffff8111156114d657634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156114ff578160200160208202803683370190505b50905060008061150d6110cc565b905060005b818110156115ac578673ffffffffffffffffffffffffffffffffffffffff1661153d6106b6836117a3565b73ffffffffffffffffffffffffffffffffffffffff16141561159a57611562816117a3565b848461156d81614a71565b95508151811061158d57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b806115a481614a71565b915050611512565b509195945050505050565b6000818152600b6020526040812060038101546060929067ffffffffffffffff8111156115f457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561162d57816020015b61161a61371a565b8152602001906001900390816116125790505b50905060005b600383015481101561173d57600b600084600301838154811061166657634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382018054806020026020016040519081016040528092919081815260200182805480156116f757602002820191906000526020600020905b8154815260200190600101908083116116e3575b50505050508152505082828151811061172057634e487b7160e01b600052603260045260246000fd5b602090810291909101015261173660018261498a565b9050611633565b509392505050565b61174d612945565b73ffffffffffffffffffffffffffffffffffffffff1661176b611d27565b73ffffffffffffffffffffffffffffffffffffffff161461179e5760405162461bcd60e51b8152600401610a4b90614578565b601555565b60006117ad6110cc565b82106117cb5760405162461bcd60e51b8152600401610a4b9061485a565b600882815481106117ec57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b611806612945565b73ffffffffffffffffffffffffffffffffffffffff16611824611d27565b73ffffffffffffffffffffffffffffffffffffffff16146118575760405162461bcd60e51b8152600401610a4b90614578565b601755565b73516dbdc188213e01f625bc3d8ef87df48eb68c5381565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff16806109d35760405162461bcd60e51b8152600401610a4b906143e4565b600c5481565b601280546118c990614a36565b80601f01602080910402602001604051908101604052809291908181526020018280546118f590614a36565b80156119425780601f1061191757610100808354040283529160200191611942565b820191906000526020600020905b81548152906001019060200180831161192557829003601f168201915b505050505081565b60135481565b60105460ff16156119735760405162461bcd60e51b8152600401610a4b90614732565b61197c846128a3565b6119985760405162461bcd60e51b8152600401610a4b90614296565b8082141580156119c55750336119ad83611874565b73ffffffffffffffffffffffffffffffffffffffff16145b80156119ee5750336119d682611874565b73ffffffffffffffffffffffffffffffffffffffff16145b611a0a5760405162461bcd60e51b8152600401610a4b90614441565b600d54341015611a2c5760405162461bcd60e51b8152600401610a4b9061469e565b6000612775601454611a3e919061498a565b9050611a4b838383612c35565b611a55338261285f565b60008181526011602090815260409091208551611a7492870190613696565b50600160146000828254611a88919061498a565b909155505060405181907f8ef1ea5ce94d405f55ffed5be4e495bdf6a9363d5b7af4fe3f4d66678d4ac84f90600090a25050505050565b600073ffffffffffffffffffffffffffffffffffffffff8216611af45760405162461bcd60e51b8152600401610a4b90614387565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b611b25612945565b73ffffffffffffffffffffffffffffffffffffffff16611b43611d27565b73ffffffffffffffffffffffffffffffffffffffff1614611b765760405162461bcd60e51b8152600401610a4b90614578565b611b806000612d29565b565b611b8a612945565b73ffffffffffffffffffffffffffffffffffffffff16611ba8611d27565b73ffffffffffffffffffffffffffffffffffffffff1614611bdb5760405162461bcd60e51b8152600401610a4b90614578565b600d55565b61277581565b600f5481565b3373516dbdc188213e01f625bc3d8ef87df48eb68c531480611c2157503373396823f49aa9f0e3fac4b939bc27ad5cd88264db145b80611c5e5750611c2f611d27565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611c7a5760405162461bcd60e51b8152600401610a4b906148b7565b476402540be400811015611ca05760405162461bcd60e51b8152600401610a4b9061400f565b6000611cb86064611cb2846005612da0565b90612db3565b9050611cd873516dbdc188213e01f625bc3d8ef87df48eb68c5382612dbf565b611d0c73396823f49aa9f0e3fac4b939bc27ad5cd88264db6103e8611cfd84866149f3565b611d0791906149f3565b612dbf565b5050565b6000601354612775611d2291906149f3565b905090565b600a5473ffffffffffffffffffffffffffffffffffffffff1690565b6000600f5462015180611d56919061498a565b421115905090565b606060018054610c4090614a36565b611d75612945565b73ffffffffffffffffffffffffffffffffffffffff16611d93611d27565b73ffffffffffffffffffffffffffffffffffffffff1614611dc65760405162461bcd60e51b8152600401610a4b90614578565b8051611d0c906012906020840190613696565b611de1612945565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e2c5760405162461bcd60e51b8152600401610a4b906141f1565b8060056000611e39612945565b73ffffffffffffffffffffffffffffffffffffffff90811682526020808301939093526040918201600090812091871680825291909352912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001692151592909217909155611ea8612945565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611eed9190613ff1565b60405180910390a35050565b611f0a611f04612945565b836129e9565b611f265760405162461bcd60e51b8152600401610a4b906147fd565b611f3284848484612e48565b50505050565b611f40612945565b73ffffffffffffffffffffffffffffffffffffffff16611f5e611d27565b73ffffffffffffffffffffffffffffffffffffffff1614611f915760405162461bcd60e51b8152600401610a4b90614578565b601080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001682151517908190556040517f10e1c3fcaff06b68391033547e8f9bb8067d7c4a2e32659b0629153814d242d391611ff39160ff90911690613ff1565b60405180910390a150565b60105460ff16156120215760405162461bcd60e51b8152600401610a4b906144ad565b612029611d43565b1561208357601554612061336040516020016120459190613dd5565b6040516020818303038152906040528051906020012084612e7b565b1461207e5760405162461bcd60e51b8152600401610a4b90614769565b6120b7565b60165461209a826040516020016120459190613e13565b146120b75760405162461bcd60e51b8152600401610a4b90614228565b612775601354106120da5760405162461bcd60e51b8152600401610a4b9061425f565b600c543410156120fc5760405162461bcd60e51b8152600401610a4b9061469e565b61210760135461276e565b6121133360135461285f565b6013546040517fe022f58b17edead5c8a541758e9b66796ebfbf27d6fd8044500f2468ac6e39fc90600090a2600160136000828254612152919061498a565b90915550505050565b606061216682612879565b6121825760405162461bcd60e51b8152600401610a4b9061460a565b6000828152601160205260408120805461219b90614a36565b80601f01602080910402602001604051908101604052809291908181526020018280546121c790614a36565b80156122145780601f106121e957610100808354040283529160200191612214565b820191906000526020600020905b8154815290600101906020018083116121f757829003601f168201915b5050505050905080516000141561225857601261223084612f2c565b604051602001612241929190613e2f565b6040516020818303038152906040529150506109d6565b6000838152601160205260409020805461227190614a36565b80601f016020809104026020016040519081016040528092919081815260200182805461229d90614a36565b80156122ea5780601f106122bf576101008083540402835291602001916122ea565b820191906000526020600020905b8154815290600101906020018083116122cd57829003601f168201915b5050505050915050919050565b6122ff612945565b73ffffffffffffffffffffffffffffffffffffffff1661231d611d27565b73ffffffffffffffffffffffffffffffffffffffff16146123505760405162461bcd60e51b8152600401610a4b90614578565b601655565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260056020908152604080832093909416825291909152205460ff1690565b6060600061239e8484610ddf565b90506000815167ffffffffffffffff8111156123ca57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561240357816020015b6123f061371a565b8152602001906001900390816123e85790505b50905060005b825181101561250a57600b600084838151811061243657634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382018054806020026020016040519081016040528092919081815260200182805480156124c457602002820191906000526020600020905b8154815260200190600101908083116124b0575b5050505050815250508282815181106124ed57634e487b7160e01b600052603260045260246000fd5b602090810291909101015261250360018261498a565b9050612409565b50949350505050565b61251b612945565b73ffffffffffffffffffffffffffffffffffffffff16612539611d27565b73ffffffffffffffffffffffffffffffffffffffff161461256c5760405162461bcd60e51b8152600401610a4b90614578565b42600f55565b61257a612945565b73ffffffffffffffffffffffffffffffffffffffff16612598611d27565b73ffffffffffffffffffffffffffffffffffffffff16146125cb5760405162461bcd60e51b8152600401610a4b90614578565b73ffffffffffffffffffffffffffffffffffffffff81166125fe5760405162461bcd60e51b8152600401610a4b90614100565b61260781612d29565b50565b612612612945565b73ffffffffffffffffffffffffffffffffffffffff16612630611d27565b73ffffffffffffffffffffffffffffffffffffffff16146126635760405162461bcd60e51b8152600401610a4b90614578565b600c55565b612670612945565b73ffffffffffffffffffffffffffffffffffffffff1661268e611d27565b73ffffffffffffffffffffffffffffffffffffffff16146126c15760405162461bcd60e51b8152600401610a4b90614578565b600e55565b3b151590565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061275f57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806109d357506109d38261307b565b6040518060800160405280600081526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8152602001600067ffffffffffffffff8111156127f457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561281d578160200160208202803683370190505b5090526000828152600b60209081526040918290208351815583820151600182015591830151600283015560608301518051611f329260038501920190613742565b611d0c8282604051806020016040528060008152506130c5565b60009081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff16151590565b60008060175483846128b591906149b6565b6128bf9190614aaa565b9050600060175484836128d291906149b6565b6128dc9190614aaa565b6128e690426149f3565b607811949350505050565b6000868152600b60205260409020859055801561293d576000868152600b602090815260409091206001810186905560028101859055835161293b92600390920191850190613742565b505b505050505050565b3390565b600081815260046020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff841690811790915581906129a382611874565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006129f482612879565b612a105760405162461bcd60e51b8152600401610a4b906142cd565b6000612a1b83611874565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612a8a57508373ffffffffffffffffffffffffffffffffffffffff16612a7284610cc3565b73ffffffffffffffffffffffffffffffffffffffff16145b80612a9a5750612a9a8185612355565b949350505050565b8273ffffffffffffffffffffffffffffffffffffffff16612ac282611874565b73ffffffffffffffffffffffffffffffffffffffff1614612af55760405162461bcd60e51b8152600401610a4b906145ad565b73ffffffffffffffffffffffffffffffffffffffff8216612b285760405162461bcd60e51b8152600401610a4b90614194565b612b338383836130f8565b612b3e600082612949565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600360205260408120805460019290612b749084906149f3565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260408120805460019290612baf90849061498a565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b604051806080016040528060008152602001848152602001838152602001600067ffffffffffffffff811115612c7b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612ca4578160200160208202803683370190505b5090526000828152600b60209081526040918290208351815583820151600182015591830151600283015560608301518051612ce69260038501920190613742565b5050506000928352600b60209081526040808520600390810180546001818101835591885284882001859055948652908520018054938401815584529092200155565b600a805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000612dac82846149b6565b9392505050565b6000612dac82846149a2565b60008273ffffffffffffffffffffffffffffffffffffffff1682604051612de590613ef3565b60006040518083038185875af1925050503d8060008114612e22576040519150601f19603f3d011682016040523d82523d6000602084013e612e27565b606091505b5050905080610dda5760405162461bcd60e51b8152600401610a4b906147c6565b612e53848484612aa2565b612e5f848484846131cf565b611f325760405162461bcd60e51b8152600401610a4b906140a3565b600082815b835181101561173d576000848281518110612eab57634e487b7160e01b600052603260045260246000fd5b6020026020010151905080831015612eed578281604051602001612ed0929190613e05565b604051602081830303815290604052805190602001209250612f19565b8083604051602001612f00929190613e05565b6040516020818303038152906040528051906020012092505b5080612f2481614a71565b915050612e80565b606081612f6d575060408051808201909152600181527f300000000000000000000000000000000000000000000000000000000000000060208201526109d6565b8160005b8115612f975780612f8181614a71565b9150612f909050600a836149a2565b9150612f71565b60008167ffffffffffffffff811115612fc057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612fea576020820181803683370190505b5090505b8415612a9a57612fff6001836149f3565b915061300c600a86614aaa565b61301790603061498a565b60f81b81838151811061303a57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350613074600a866149a2565b9450612fee565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b6130cf8383613353565b6130dc60008484846131cf565b610dda5760405162461bcd60e51b8152600401610a4b906140a3565b613103838383610dda565b73ffffffffffffffffffffffffffffffffffffffff831661312c5761312781613471565b613169565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146131695761316983826134b5565b73ffffffffffffffffffffffffffffffffffffffff82166131925761318d8161356c565b610dda565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610dda57610dda8282613645565b60006131f08473ffffffffffffffffffffffffffffffffffffffff166126c6565b15613348578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02613219612945565b8786866040518563ffffffff1660e01b815260040161323b9493929190613f17565b602060405180830381600087803b15801561325557600080fd5b505af19250505080156132a3575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526132a091810190613b60565b60015b6132fd573d8080156132d1576040519150601f19603f3d011682016040523d82523d6000602084013e6132d6565b606091505b5080516132f55760405162461bcd60e51b8152600401610a4b906140a3565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050612a9a565b506001949350505050565b73ffffffffffffffffffffffffffffffffffffffff82166133865760405162461bcd60e51b8152600401610a4b90614478565b61338f81612879565b156133ac5760405162461bcd60e51b8152600401610a4b9061415d565b6133b8600083836130f8565b73ffffffffffffffffffffffffffffffffffffffff821660009081526003602052604081208054600192906133ee90849061498a565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b600060016134c284611abf565b6134cc91906149f3565b60008381526007602052604090205490915080821461352c5773ffffffffffffffffffffffffffffffffffffffff841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b50600091825260076020908152604080842084905573ffffffffffffffffffffffffffffffffffffffff9094168352600681528383209183525290812055565b60085460009061357e906001906149f3565b600083815260096020526040812054600880549394509092849081106135b457634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600883815481106135e357634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061362957634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061365083611abf565b73ffffffffffffffffffffffffffffffffffffffff9093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b8280546136a290614a36565b90600052602060002090601f0160209004810192826136c4576000855561370a565b82601f106136dd57805160ff191683800117855561370a565b8280016001018555821561370a579182015b8281111561370a5782518255916020019190600101906136ef565b5061371692915061377c565b5090565b6040518060800160405280600081526020016000815260200160008152602001606081525090565b82805482825590600052602060002090810192821561370a579160200282018281111561370a5782518255916020019190600101906136ef565b5b80821115613716576000815560010161377d565b600067ffffffffffffffff8311156137ab576137ab614aea565b6137dc60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f86011601614930565b90508281528383830111156137f057600080fd5b828260208301376000602084830101529392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146109d657600080fd5b600082601f83011261383b578081fd5b8135602061385061384b8361495a565b614930565b828152818101908583018385028701840188101561386c578586fd5b855b8581101561388a5781358452928401929084019060010161386e565b5090979650505050505050565b803580151581146109d657600080fd5b600082601f8301126138b7578081fd5b612dac83833560208501613791565b6000602082840312156138d7578081fd5b612dac82613807565b600080604083850312156138f2578081fd5b6138fb83613807565b915061390960208401613807565b90509250929050565b600080600060608486031215613926578081fd5b61392f84613807565b925061393d60208501613807565b9150604084013590509250925092565b60008060008060808587031215613962578081fd5b61396b85613807565b935061397960208601613807565b925060408501359150606085013567ffffffffffffffff81111561399b578182fd5b8501601f810187136139ab578182fd5b6139ba87823560208401613791565b91505092959194509250565b600080604083850312156139d8578182fd5b6139e183613807565b915061390960208401613897565b60008060408385031215613a01578182fd5b613a0a83613807565b946020939093013593505050565b60008060408385031215613a2a578182fd5b823567ffffffffffffffff80821115613a41578384fd5b818501915085601f830112613a54578384fd5b81356020613a6461384b8361495a565b82815281810190858301838502870184018b1015613a80578889fd5b8896505b84871015613aa2578035835260019690960195918301918301613a84565b5096505086013592505080821115613ab8578283fd5b50613ac5858286016138a7565b9150509250929050565b60008060408385031215613ae1578182fd5b823567ffffffffffffffff811115613af7578283fd5b613b038582860161382b565b95602094909401359450505050565b600060208284031215613b23578081fd5b612dac82613897565b600060208284031215613b3d578081fd5b5035919050565b600060208284031215613b55578081fd5b8135612dac81614b00565b600060208284031215613b71578081fd5b8151612dac81614b00565b600060208284031215613b8d578081fd5b813567ffffffffffffffff811115613ba3578182fd5b612a9a848285016138a7565b60008060408385031215613bc1578182fd5b82359150602083013567ffffffffffffffff811115613bde578182fd5b613ac5858286016138a7565b60008060008060808587031215613bff578182fd5b84359350602085013567ffffffffffffffff811115613c1c578283fd5b613c28878288016138a7565b949794965050505060408301359260600135919050565b60008060408385031215613c51578182fd5b50508035926020909101359150565b600080600080600080600080610100898b031215613c7c578586fd5b8835975060208901359650604089013567ffffffffffffffff80821115613ca1578788fd5b613cad8c838d016138a7565b975060608b0135965060808b0135955060a08b0135945060c08b0135915080821115613cd7578384fd5b50613ce48b828c0161382b565b925050613cf360e08a01613897565b90509295985092959890939650565b6000815180845260208085019450808401835b83811015613d3157815187529582019590820190600101613d15565b509495945050505050565b60008151808452613d54816020860160208601614a0a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008151613d98818560208601614a0a565b9290920192915050565b6000815183526020820151602084015260408201516040840152606082015160806060850152612a9a6080850182613d02565b60609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b918252602082015260400190565b60008251613e25818460208701614a0a565b9190910192915050565b8254600090819060028104600180831680613e4b57607f831692505b6020808410821415613e6b57634e487b7160e01b87526022600452602487fd5b818015613e7f5760018114613eae57613eda565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00861689528489019650613eda565b613eb78b61497e565b885b86811015613ed25781548b820152908501908301613eb9565b505084890196505b505050505050613eea8185613d86565b95945050505050565b90565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525083604083015260806060830152613f566080830184613d3c565b9695505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015613fd1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452613fbf858351613da2565b94509285019290850190600101613f85565b5092979650505050505050565b600060208252612dac6020830184613d02565b901515815260200190565b600060208252612dac6020830184613d3c565b60208082526014908201527f42616c616e636520697320746f6f20736d616c6c000000000000000000000000604082015260600190565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201527f74206f6620626f756e6473000000000000000000000000000000000000000000606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527f63656976657220696d706c656d656e7465720000000000000000000000000000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460408201527f7265737300000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b60208082526011908201527f4e6f742061757468656e74696361746564000000000000000000000000000000604082015260600190565b60208082526009908201527f4d6178206c696d69740000000000000000000000000000000000000000000000604082015260600190565b60208082526010908201527f7065726d697373696f6e206572726f7200000000000000000000000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201527f697374656e7420746f6b656e0000000000000000000000000000000000000000606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560408201527f726f206164647265737300000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201527f656e7420746f6b656e0000000000000000000000000000000000000000000000606082015260800190565b6020808252600d908201527f506172656e7473206572726f7200000000000000000000000000000000000000604082015260600190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252600b908201527f53616c6520506175736564000000000000000000000000000000000000000000604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201527f697374656e7420746f6b656e0000000000000000000000000000000000000000606082015260800190565b60208082526010908201527f4e6f20756e736f6c6420746f6b656e7300000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201527f73206e6f74206f776e0000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000606082015260800190565b6020808252600f908201527f746f6b656e206e6f742065786973740000000000000000000000000000000000604082015260600190565b60208082526011908201527f56616c75652062656c6f77207072696365000000000000000000000000000000604082015260600190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560408201527f7200000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600c908201527f4272656564205061757365640000000000000000000000000000000000000000604082015260600190565b60208082526024908201527f41646472657373206973206e6f7420696e636c7564656420696e20776869746560408201527f4c69737400000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526010908201527f5472616e73666572206661696c65642e00000000000000000000000000000000604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60408201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606082015260800190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201527f7574206f6620626f756e64730000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f596f7520646f6e27742068617665207769746864726177696e6720707269766960408201527f6c65646765000000000000000000000000000000000000000000000000000000606082015260800190565b600060208252612dac6020830184613da2565b90815260200190565b60405181810167ffffffffffffffff8111828210171561495257614952614aea565b604052919050565b600067ffffffffffffffff82111561497457614974614aea565b5060209081020190565b60009081526020902090565b6000821982111561499d5761499d614abe565b500190565b6000826149b1576149b1614ad4565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156149ee576149ee614abe565b500290565b600082821015614a0557614a05614abe565b500390565b60005b83811015614a25578181015183820152602001614a0d565b83811115611f325750506000910152565b600281046001821680614a4a57607f821691505b60208210811415614a6b57634e487b7160e01b600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614aa357614aa3614abe565b5060010190565b600082614ab957614ab9614ad4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b7fffffffff000000000000000000000000000000000000000000000000000000008116811461260757600080fdfea2646970667358221220d63988b91c3278244f6a4801808b33a4ba1212ed860d32abc66716092b72195664736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 129,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 131,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 135,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 139,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 143,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 149,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1068,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1072,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1075,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1079,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 3292,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_heros",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Hero)3287_storage)"
      },
      {
        "astId": 2344,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "mintPrice",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2347,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "breedPrice",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2350,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "upgradePrice",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2361,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "startTime",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2364,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "bPaused",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 2368,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_tokenUris",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2370,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "baseURI",
        "offset": 0,
        "slot": "18",
        "type": "t_string_storage"
      },
      {
        "astId": 2373,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "mintedInitialTokenCount",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 2376,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "breedTokenCount",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 2379,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_rootWhitelist",
        "offset": 0,
        "slot": "21",
        "type": "t_bytes32"
      },
      {
        "astId": 2382,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_rootAuth",
        "offset": 0,
        "slot": "22",
        "type": "t_bytes32"
      },
      {
        "astId": 2385,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_signatureToken",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Hero)3287_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct HeroFactory.Hero)",
        "numberOfBytes": "32",
        "value": "t_struct(Hero)3287_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Hero)3287_storage": {
        "encoding": "inplace",
        "label": "struct HeroFactory.Hero",
        "members": [
          {
            "astId": 3279,
            "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
            "label": "traits",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3281,
            "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
            "label": "fatherId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3283,
            "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
            "label": "motherId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3286,
            "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
            "label": "childrenIds",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}