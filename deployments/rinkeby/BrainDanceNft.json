{
  "address": "0x589eCCaE2B928088Fc335B87fB1BD81d25220e5C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "BreededNewNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "MintedNewNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pause",
          "type": "bool"
        }
      ],
      "name": "PauseEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ABC_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ARTIST_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INITIAL_TOKEN_COUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "array",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "val",
          "type": "uint256"
        }
      ],
      "name": "findIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "getChildren",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "traits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fatherId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "motherId",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "childrenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct HeroFactory.Hero[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "heroId1_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "heroId2_",
          "type": "uint256"
        }
      ],
      "name": "getChildrenIdsWithParent",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "heroId1_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "heroId2_",
          "type": "uint256"
        }
      ],
      "name": "getChildrenWithParent",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "traits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fatherId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "motherId",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "childrenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct HeroFactory.Hero[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "getHero",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "traits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fatherId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "motherId",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "childrenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct HeroFactory.Hero",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "getParent",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "traits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fatherId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "motherId",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "childrenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct HeroFactory.Hero[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPresale",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "string",
          "name": "leaf",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenUri_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "heroId1_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "heroId2_",
          "type": "uint256"
        }
      ],
      "name": "mintBreedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "tokenUris_",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "count_",
          "type": "uint256"
        }
      ],
      "name": "mintUnsoldTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintedInitialTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remainTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "name": "setBaseUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "pause",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root_",
          "type": "bytes32"
        }
      ],
      "name": "setRootAuth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root_",
          "type": "bytes32"
        }
      ],
      "name": "setRootWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setStarttime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenUri_",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcd0c14733a56750f3c5deafaff9e0f6f2ec8a3023ebe0ef1d880a3822d1eb3c9",
  "receipt": {
    "to": null,
    "from": "0xA5DBC34d69B745d5ee9494E6960a811613B9ae32",
    "contractAddress": "0x589eCCaE2B928088Fc335B87fB1BD81d25220e5C",
    "transactionIndex": 23,
    "gasUsed": "4488729",
    "logsBloom": "0x
    "blockHash": "0x23d08e99e27dba091f053888a5cb5239327000f55964d2dac4f5d94db101ed7e",
    "transactionHash": "0xcd0c14733a56750f3c5deafaff9e0f6f2ec8a3023ebe0ef1d880a3822d1eb3c9",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 9729821,
        "transactionHash": "0xcd0c14733a56750f3c5deafaff9e0f6f2ec8a3023ebe0ef1d880a3822d1eb3c9",
        "address": "0x589eCCaE2B928088Fc335B87fB1BD81d25220e5C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a5dbc34d69b745d5ee9494e6960a811613b9ae32"
        ],
        "data": "0x",
        "logIndex": 46,
        "blockHash": "0x23d08e99e27dba091f053888a5cb5239327000f55964d2dac4f5d94db101ed7e"
      },
      {
        "transactionIndex": 23,
        "blockNumber": 9729821,
        "transactionHash": "0xcd0c14733a56750f3c5deafaff9e0f6f2ec8a3023ebe0ef1d880a3822d1eb3c9",
        "address": "0x589eCCaE2B928088Fc335B87fB1BD81d25220e5C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000396823f49aa9f0e3fac4b939bc27ad5cd88264db",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 47,
        "blockHash": "0x23d08e99e27dba091f053888a5cb5239327000f55964d2dac4f5d94db101ed7e"
      },
      {
        "transactionIndex": 23,
        "blockNumber": 9729821,
        "transactionHash": "0xcd0c14733a56750f3c5deafaff9e0f6f2ec8a3023ebe0ef1d880a3822d1eb3c9",
        "address": "0x589eCCaE2B928088Fc335B87fB1BD81d25220e5C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000516dbdc188213e01f625bc3d8ef87df48eb68c53",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 48,
        "blockHash": "0x23d08e99e27dba091f053888a5cb5239327000f55964d2dac4f5d94db101ed7e"
      },
      {
        "transactionIndex": 23,
        "blockNumber": 9729821,
        "transactionHash": "0xcd0c14733a56750f3c5deafaff9e0f6f2ec8a3023ebe0ef1d880a3822d1eb3c9",
        "address": "0x589eCCaE2B928088Fc335B87fB1BD81d25220e5C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000892e10cb1299c16e469cf0f79f18cca639d00f5b",
          "0x0000000000000000000000000000000000000000000000000000000000000002"
        ],
        "data": "0x",
        "logIndex": 49,
        "blockHash": "0x23d08e99e27dba091f053888a5cb5239327000f55964d2dac4f5d94db101ed7e"
      }
    ],
    "blockNumber": 9729821,
    "cumulativeGasUsed": "18042031",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "BD 1129",
    "BD1129",
    "https://gateway.pinata.cloud/ipfs/QmSeY3cFvdjHp2fKYwFSvMJpaSzdjZVotbnYmMyifLNCTp/"
  ],
  "solcInputHash": "a847637a30f44329761e50cba88dc49d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BreededNewNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MintedNewNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"PauseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ABC_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ARTIST_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_TOKEN_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"array\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"findIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getChildren\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"traits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fatherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"motherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"childrenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct HeroFactory.Hero[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"heroId1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"heroId2_\",\"type\":\"uint256\"}],\"name\":\"getChildrenIdsWithParent\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"heroId1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"heroId2_\",\"type\":\"uint256\"}],\"name\":\"getChildrenWithParent\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"traits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fatherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"motherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"childrenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct HeroFactory.Hero[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getHero\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"traits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fatherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"motherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"childrenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct HeroFactory.Hero\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getParent\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"traits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fatherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"motherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"childrenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct HeroFactory.Hero[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"string\",\"name\":\"leaf\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenUri_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"heroId1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"heroId2_\",\"type\":\"uint256\"}],\"name\":\"mintBreedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"tokenUris_\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"count_\",\"type\":\"uint256\"}],\"name\":\"mintUnsoldTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedInitialTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root_\",\"type\":\"bytes32\"}],\"name\":\"setRootAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root_\",\"type\":\"bytes32\"}],\"name\":\"setRootWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setStarttime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenUri_\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BrainDanceNft.sol\":\"BrainDanceNft\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/BrainDanceNft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"./HeroFactory.sol\\\";\\r\\n\\r\\ncontract BrainDanceNft is ERC721Enumerable, Ownable, HeroFactory {\\r\\n    using SafeMath for uint256;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // initial token count\\r\\n    uint256 public constant INITIAL_TOKEN_COUNT = 10101;\\r\\n\\r\\n    // initial token price\\r\\n    uint256 public constant MINT_PRICE = 0.07 ether;\\r\\n    \\r\\n    // creator's addresses\\r\\n    address public constant ABC_ADDRESS = 0x516DBdc188213e01f625bC3d8Ef87Df48EB68C53;\\r\\n    address public constant ARTIST_ADDRESS = 0x892E10CB1299C16e469cf0f79f18CCa639D00F5B;\\r\\n    address public constant OWNER_ADDRESS = 0x396823F49AA9f0e3FAC4b939Bc27aD5cD88264Db;\\r\\n\\r\\n    // whitelist\\r\\n    uint public startTime;\\r\\n\\r\\n    // if true, stops minting\\r\\n    bool public bPaused = false;\\r\\n\\r\\n    // token's URI\\r\\n    mapping (uint256 => string) private _tokenUris;\\r\\n    string public baseURI;\\r\\n\\r\\n    uint256 public mintedInitialTokenCount = 0;\\r\\n\\r\\n    // breed tokens\\r\\n    uint256 private breedTokenCount = 0;\\r\\n\\r\\n    // merkle tree\\r\\n    bytes32 private _rootWhitelist = 0xa2fc709bf2f4b9cb44b8a9114485d12d4877bb1beedd81f62f4f85a8056480ee;\\r\\n    bytes32 private _rootAuth = 0xa2fc709bf2f4b9cb44b8a9114485d12d4877bb1beedd81f62f4f85a8056480ee;\\r\\n\\r\\n    // events\\r\\n    event PauseEvent(bool pause);\\r\\n    event MintedNewNFT(uint256 indexed tokenId);\\r\\n    event BreededNewNFT(uint256 indexed tokenId);\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_, string memory baseURI_) ERC721(name_, symbol_) {\\r\\n        // mark start time for whitelist\\r\\n        startTime = block.timestamp;\\r\\n        baseURI = baseURI_;\\r\\n\\r\\n        // should mint #00000\\r\\n        _tokenUris[0] = string(abi.encodePacked(baseURI, \\\"0\\\"));\\r\\n        _mintHero(0);\\r\\n        _safeMint(OWNER_ADDRESS, 0);\\r\\n\\r\\n        // should mint #00001\\r\\n        _tokenUris[1] = string(abi.encodePacked(baseURI, \\\"1\\\"));\\r\\n        _mintHero(1);\\r\\n        _safeMint(ABC_ADDRESS, 1);\\r\\n\\r\\n        // should mint #00002\\r\\n        _tokenUris[2] = string(abi.encodePacked(baseURI, \\\"2\\\"));\\r\\n        _mintHero(2);\\r\\n        _safeMint(ARTIST_ADDRESS, 2);\\r\\n        mintedInitialTokenCount += 3;\\r\\n    }\\r\\n\\r\\n    function setTokenURI(uint256 tokenId_, string memory tokenUri_) public onlyOwner {\\r\\n        _tokenUris[tokenId_] = tokenUri_;\\r\\n    }\\r\\n\\r\\n    function remainTokenCount() public view returns (uint256) {\\r\\n        return INITIAL_TOKEN_COUNT - mintedInitialTokenCount;\\r\\n    }\\r\\n\\r\\n    function mint(bytes32[] memory proof, string memory leaf) public payable {\\r\\n        require(!bPaused, \\\"Sale Paused\\\");\\r\\n        if (isPresale()) {\\r\\n            require(verifyCode(keccak256(abi.encodePacked(msg.sender)), proof) == _rootWhitelist, \\\"Address is not included in whiteList\\\");\\r\\n        } else {\\r\\n            require(verifyCode(keccak256(abi.encodePacked(leaf)), proof) == _rootAuth, \\\"Not authenticated\\\");\\r\\n        }\\r\\n        require(mintedInitialTokenCount < INITIAL_TOKEN_COUNT, \\\"Max limit\\\");\\r\\n        require(msg.value >= MINT_PRICE, \\\"Value below price\\\");\\r\\n\\r\\n        _mintHero(mintedInitialTokenCount);\\r\\n        _safeMint(msg.sender, mintedInitialTokenCount);\\r\\n        emit MintedNewNFT(mintedInitialTokenCount);\\r\\n        mintedInitialTokenCount += 1;\\r\\n    }\\r\\n\\r\\n    function walletOfOwner(address owner) external view returns (uint256[] memory) {\\r\\n        uint256 tokenCount = balanceOf(owner);\\r\\n        uint256[] memory tokensId = new uint256[](tokenCount);\\r\\n        uint256 iToken = 0;\\r\\n        uint256 total = totalSupply();\\r\\n        for (uint256 i = 0; i < total; i++) {\\r\\n            if (ownerOf(tokenByIndex(i)) == owner) {\\r\\n                tokensId[iToken++] = tokenByIndex(i);\\r\\n            }\\r\\n        }\\r\\n        return tokensId;\\r\\n    }\\r\\n\\r\\n    function setPause(bool pause) public onlyOwner {\\r\\n        bPaused = pause;\\r\\n        emit PauseEvent(bPaused);\\r\\n    }\\r\\n\\r\\n    function withdrawAll() external {\\r\\n        require(msg.sender == ABC_ADDRESS || msg.sender == OWNER_ADDRESS || msg.sender == owner(), \\\"You don't have withdrawing priviledge\\\");\\r\\n        uint256 balance = address(this).balance;\\r\\n        require(balance >= 10000000000, \\\"Balance is too small\\\");\\r\\n        uint256 balance_5p = balance.mul(5).div(100);\\r\\n        _widthdraw(ABC_ADDRESS, balance_5p);\\r\\n        _widthdraw(OWNER_ADDRESS, balance - balance_5p - 1000);\\r\\n    }\\r\\n\\r\\n    function _widthdraw(address _address, uint256 _amount) private {\\r\\n        (bool success, ) = _address.call{value: _amount}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed.\\\");\\r\\n    }\\r\\n\\r\\n    function mintUnsoldTokens(address to_, string[] memory tokenUris_, uint256 count_) public onlyOwner {\\r\\n        require(mintedInitialTokenCount < INITIAL_TOKEN_COUNT, \\\"No unsold tokens\\\");\\r\\n        require(tokenUris_.length == count_, \\\"TokenUris should match\\\");\\r\\n\\r\\n        uint256 end = mintedInitialTokenCount + count_;\\r\\n        if (end > INITIAL_TOKEN_COUNT) {\\r\\n            end = INITIAL_TOKEN_COUNT;\\r\\n        }\\r\\n        for (uint256 i = mintedInitialTokenCount; i < end; i++) {\\r\\n            _tokenUris[i] = tokenUris_[i - mintedInitialTokenCount];\\r\\n            _mintHero(i);\\r\\n            _safeMint(to_, i);\\r\\n        }\\r\\n        mintedInitialTokenCount = end;\\r\\n    }\\r\\n\\r\\n    function mintBreedToken(string memory tokenUri_, uint256 heroId1_, uint256 heroId2_) public {\\r\\n        require(heroId1_ != heroId2_, \\\"Parents should not be same\\\");\\r\\n        require(ownerOf(heroId1_) == msg.sender && ownerOf(heroId2_) == msg.sender, \\\"Parents not exist\\\");\\r\\n        uint256 tokenId = breedTokenCount + INITIAL_TOKEN_COUNT;\\r\\n        _breedHero(heroId1_, heroId2_, tokenId);\\r\\n        _safeMint(msg.sender, tokenId);\\r\\n        _tokenUris[tokenId] = tokenUri_;\\r\\n        breedTokenCount += 1;\\r\\n        emit BreededNewNFT(tokenId);\\r\\n    }\\r\\n\\r\\n    // breed token's tokenURI\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n        if (tokenId < INITIAL_TOKEN_COUNT) {\\r\\n            return string(abi.encodePacked(baseURI, tokenId.toString()));\\r\\n        }\\r\\n        return _tokenUris[tokenId];\\r\\n    }\\r\\n\\r\\n    function setStarttime() public onlyOwner {\\r\\n        startTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function verifyCode(bytes32 leaf, bytes32[] memory proof) private pure returns (bytes32) {\\r\\n        bytes32 computedHash = leaf;\\r\\n        for (uint256 i = 0; i < proof.length; i++) {\\r\\n            bytes32 proofElement = proof[i];\\r\\n\\r\\n            if (computedHash < proofElement) {\\r\\n                // Hash(current computed hash + current element of the proof)\\r\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\r\\n            } else {\\r\\n                // Hash(current element of the proof + current computed hash)\\r\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\r\\n            }\\r\\n        }\\r\\n        return computedHash;\\r\\n    }\\r\\n\\r\\n    function isPresale() public view returns (bool) {\\r\\n        return (block.timestamp <= startTime + 24 hours);\\r\\n    }\\r\\n\\r\\n    function setRootWhitelist(bytes32 root_) external onlyOwner {\\r\\n        _rootWhitelist = root_;\\r\\n    }\\r\\n    \\r\\n    function setRootAuth(bytes32 root_) external onlyOwner {\\r\\n        _rootAuth = root_;\\r\\n    }\\r\\n\\r\\n    function setBaseUri(string memory uri_) external onlyOwner {\\r\\n        baseURI = uri_;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x742fed1a3005c3952d4253ab02bf3607ca5233cf900fa0a90e4db266e9cb26dd\",\"license\":\"MIT\"},\"contracts/HeroFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract HeroFactory {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    struct Hero {\\r\\n        uint256 traits;\\r\\n        // ancestor\\r\\n        uint256 fatherId;\\r\\n        uint256 motherId;\\r\\n        uint256[] childrenIds;\\r\\n    }\\r\\n\\r\\n    mapping (uint256 => Hero) internal _heros;\\r\\n\\r\\n    uint256 constant MAX_INT = 2**256 - 1;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function _mintHero(uint256 tokenId_) internal {\\r\\n        _heros[tokenId_] = Hero(0, MAX_INT, MAX_INT, new uint256[](0));\\r\\n    }\\r\\n\\r\\n    function _breedHero(uint256 heroId1_, uint256 heroId2_, uint256 tokenId_) internal {\\r\\n        // create a child\\r\\n        _heros[tokenId_] = Hero(0, heroId1_, heroId2_, new uint256[](0));\\r\\n\\r\\n        // add child id\\r\\n        _heros[heroId1_].childrenIds.push(tokenId_);\\r\\n        _heros[heroId2_].childrenIds.push(tokenId_);\\r\\n    }\\r\\n\\r\\n    function getHero(uint256 tokenId_) external view returns (Hero memory) {\\r\\n        return _heros[tokenId_];\\r\\n    }\\r\\n\\r\\n    function getParent(uint256 tokenId_) external view returns (Hero[] memory) {\\r\\n        Hero[] memory parent;\\r\\n        Hero storage hero = _heros[tokenId_];\\r\\n        if (hero.fatherId != MAX_INT) {\\r\\n            parent = new Hero[](2);\\r\\n            parent[0] = _heros[hero.fatherId];\\r\\n            parent[1] = _heros[hero.motherId];\\r\\n        }\\r\\n        return parent;\\r\\n    }\\r\\n\\r\\n    function getChildren(uint256 tokenId_) external view returns (Hero[] memory) {\\r\\n        Hero storage hero = _heros[tokenId_];\\r\\n        Hero[] memory children = new Hero[](hero.childrenIds.length);\\r\\n        for (uint i = 0; i < hero.childrenIds.length; i += 1) {\\r\\n            children[i] = _heros[hero.childrenIds[i]];\\r\\n        }\\r\\n        return children;\\r\\n    }\\r\\n\\r\\n    function getChildrenIdsWithParent(uint256 heroId1_, uint256 heroId2_) public view returns (uint256[] memory) {\\r\\n        Hero storage hero1 = _heros[heroId1_];\\r\\n        uint256 count = 0;\\r\\n        uint256[] memory ret = new uint256[](hero1.childrenIds.length);\\r\\n        count = 0;\\r\\n        for (uint i = 0; i < hero1.childrenIds.length; i += 1) {\\r\\n            if (findIndex(_heros[heroId2_].childrenIds, hero1.childrenIds[i]) < _heros[heroId2_].childrenIds.length) {\\r\\n                ret[count++] = hero1.childrenIds[i];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256[] memory ret1 = new uint256[](count);\\r\\n        count = 0;\\r\\n        for (uint i = 0; i < ret.length; i += 1) {\\r\\n            ret1[i] = ret[i];\\r\\n        }\\r\\n\\r\\n        return ret1;\\r\\n    }\\r\\n\\r\\n    function getChildrenWithParent(uint256 heroId1_, uint256 heroId2_) external view returns (Hero[] memory) {\\r\\n        uint256[] memory ids = getChildrenIdsWithParent(heroId1_, heroId2_);\\r\\n        Hero[] memory ret = new Hero[](ids.length);\\r\\n        for (uint i = 0; i < ids.length; i += 1) {\\r\\n            ret[i] = _heros[ids[i]];\\r\\n        }\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    function findIndex(uint256[] memory array, uint256 val) public pure returns (uint256) {\\r\\n        for (uint i = 0; i < array.length; i += 1) {\\r\\n            if (array[i] == val) {\\r\\n                return i;\\r\\n            }\\r\\n        }\\r\\n        return array.length;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x797d2b69b7008ffc2746f1871633d9c63bfc4d44e02da6f763b0b3c1e2f400f3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102885760003560e01c80636c26eab91161015a578063a22cb465116100c1578063c87b56dd1161007a578063c87b56dd1461074b578063d440b4c21461076b578063e985e9c51461078b578063eda9d474146107ab578063f0a65d1a146107cb578063f2fde38b146107e057610288565b8063a22cb465146106a3578063aad66516146106c3578063b88d4fde146106e3578063bedb86fb14610703578063c002d23d14610723578063c4b5aa961461073857610288565b80638d041988116101135780638d0419881461060f5780638da5cb5b1461062457806395364a841461063957806395d89b411461064e5780639f21432f14610663578063a0bcfc7f1461068357610288565b80636c26eab91461058657806370a082311461059b578063715018a6146105bb578063755cb234146105d057806378e97925146105e5578063853828b6146105fa57610288565b806323b872dd116101fe57806349ae8dc3116101b757806349ae8dc3146104dc5780634b951cef146104fc5780634f6ccce71461051c578063594ebab71461053c5780636352211e146105515780636c0360eb1461057157610288565b806323b872dd1461040f5780632f745c591461042f5780633d99de851461044f578063414533de1461046f57806342842e0e1461049c578063438b6300146104bc57610288565b80630970eaa3116102505780630970eaa31461034957806311319b1e14610376578063162094c41461038b57806318160ddd146103ab5780632099eaa7146103cd57806321d80111146103e257610288565b806301ffc9a71461028d57806306c18a31146102c357806306fdde03146102e5578063081812fc14610307578063095ea7b314610327575b600080fd5b34801561029957600080fd5b506102ad6102a8366004613071565b610800565b6040516102ba91906133ea565b60405180910390f35b3480156102cf57600080fd5b506102d861082d565b6040516102ba9190613326565b3480156102f157600080fd5b506102fa610845565b6040516102ba91906133f5565b34801561031357600080fd5b506102d8610322366004613059565b6108d7565b34801561033357600080fd5b50610347610342366004612ecb565b610923565b005b34801561035557600080fd5b50610369610364366004613160565b6109bb565b6040516102ba91906133d7565b34801561038257600080fd5b506102ad610c25565b34801561039757600080fd5b506103476103a6366004613126565b610c2e565b3480156103b757600080fd5b506103c0610c8c565b6040516102ba9190613b53565b3480156103d957600080fd5b506102d8610c92565b3480156103ee57600080fd5b506104026103fd366004613059565b610caa565b6040516102ba9190613b40565b34801561041b57600080fd5b5061034761042a366004612d47565b610d41565b34801561043b57600080fd5b506103c061044a366004612ecb565b610d79565b34801561045b57600080fd5b506103c061046a366004612faa565b610dcb565b34801561047b57600080fd5b5061048f61048a366004613059565b610e29565b6040516102ba9190613377565b3480156104a857600080fd5b506103476104b7366004612d47565b61100c565b3480156104c857600080fd5b506103696104d7366004612cfb565b611027565b3480156104e857600080fd5b5061048f6104f7366004613059565b611125565b34801561050857600080fd5b50610347610517366004613059565b6112b2565b34801561052857600080fd5b506103c0610537366004613059565b6112f6565b34801561054857600080fd5b506102d8611351565b34801561055d57600080fd5b506102d861056c366004613059565b611369565b34801561057d57600080fd5b506102fa61139e565b34801561059257600080fd5b506103c061142c565b3480156105a757600080fd5b506103c06105b6366004612cfb565b611432565b3480156105c757600080fd5b50610347611476565b3480156105dc57600080fd5b506103c06114c1565b3480156105f157600080fd5b506103c06114c7565b34801561060657600080fd5b506103476114cd565b34801561061b57600080fd5b506103c06115d7565b34801561063057600080fd5b506102d86115ee565b34801561064557600080fd5b506102ad6115fd565b34801561065a57600080fd5b506102fa611618565b34801561066f57600080fd5b5061034761067e366004612dfa565b611627565b34801561068f57600080fd5b5061034761069e3660046130a9565b611760565b3480156106af57600080fd5b506103476106be366004612ea2565b6117b2565b3480156106cf57600080fd5b506103476106de3660046130db565b611880565b3480156106ef57600080fd5b506103476106fe366004612d82565b61197e565b34801561070f57600080fd5b5061034761071e36600461303f565b6119bd565b34801561072f57600080fd5b506103c0611a4b565b610347610746366004612ef4565b611a56565b34801561075757600080fd5b506102fa610766366004613059565b611bb8565b34801561077757600080fd5b50610347610786366004613059565b611cb9565b34801561079757600080fd5b506102ad6107a6366004612d15565b611cfd565b3480156107b757600080fd5b5061048f6107c6366004613160565b611d2b565b3480156107d757600080fd5b50610347611ead565b3480156107ec57600080fd5b506103476107fb366004612cfb565b611ef2565b60006001600160e01b0319821663780e9d6360e01b1480610825575061082582611f69565b90505b919050565b73396823f49aa9f0e3fac4b939bc27ad5cd88264db81565b60606000805461085490613c42565b80601f016020809104026020016040519081016040528092919081815260200182805461088090613c42565b80156108cd5780601f106108a2576101008083540402835291602001916108cd565b820191906000526020600020905b8154815290600101906020018083116108b057829003601f168201915b5050505050905090565b60006108e282611fa9565b6109075760405162461bcd60e51b81526004016108fe90613816565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061092e82611369565b9050806001600160a01b0316836001600160a01b031614156109625760405162461bcd60e51b81526004016108fe90613984565b806001600160a01b0316610974611fc6565b6001600160a01b031614806109905750610990816107a6611fc6565b6109ac5760405162461bcd60e51b81526004016108fe90613695565b6109b68383611fca565b505050565b6000828152600b6020526040812060038101546060929081906001600160401b038111156109f957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610a22578160200160208202803683370190505b5090506000915060005b6003840154811015610b4e576000868152600b6020908152604091829020600301805483518184028101840190945280845292610acf929091908490830182828015610a9757602002820191906000526020600020905b815481526020019060010190808311610a83575b5050505050866003018481548110610abf57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154610dcb565b1015610b3c57836003018181548110610af857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154828480610b0f90613c7d565b955081518110610b2f57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b610b47600182613bb4565b9050610a2c565b506000826001600160401b03811115610b7757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610ba0578160200160208202803683370190505b5090506000925060005b8251811015610c1857828181518110610bd357634e487b7160e01b600052603260045260246000fd5b6020026020010151828281518110610bfb57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610c11600182613bb4565b9050610baa565b5093505050505b92915050565b600d5460ff1681565b610c36611fc6565b6001600160a01b0316610c476115ee565b6001600160a01b031614610c6d5760405162461bcd60e51b81526004016108fe9061388c565b6000828152600e6020908152604090912082516109b692840190612b63565b60085490565b73892e10cb1299c16e469cf0f79f18cca639d00f5b81565b610cb2612be7565b6000828152600b60209081526040918290208251608081018452815481526001820154818401526002820154818501526003820180548551818602810186019096528086529194929360608601939290830182828015610d3157602002820191906000526020600020905b815481526020019060010190808311610d1d575b5050505050815250509050919050565b610d52610d4c611fc6565b82612038565b610d6e5760405162461bcd60e51b81526004016108fe90613a33565b6109b68383836120bd565b6000610d8483611432565b8210610da25760405162461bcd60e51b81526004016108fe90613436565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6000805b8351811015610e205782848281518110610df957634e487b7160e01b600052603260045260246000fd5b60200260200101511415610e0e579050610c1f565b610e19600182613bb4565b9050610dcf565b50509051919050565b6000818152600b602052604090206001810154606091829160001914611005576040805160028082526060820190925290816020015b610e67612be7565b815260200190600190039081610e5f579050509150600b60008260010154815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020018280548015610f0b57602002820191906000526020600020905b815481526020019060010190808311610ef7575b50505050508152505082600081518110610f3557634e487b7160e01b600052603260045260246000fd5b6020026020010181905250600b60008260020154815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020018280548015610fcf57602002820191906000526020600020905b815481526020019060010190808311610fbb575b50505050508152505082600181518110610ff957634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b5092915050565b6109b68383836040518060200160405280600081525061197e565b6060600061103483611432565b90506000816001600160401b0381111561105e57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611087578160200160208202803683370190505b509050600080611095610c8c565b905060005b8181101561111a57866001600160a01b03166110b861056c836112f6565b6001600160a01b03161415611108576110d0816112f6565b84846110db81613c7d565b9550815181106110fb57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b8061111281613c7d565b91505061109a565b509195945050505050565b6000818152600b602052604081206003810154606092906001600160401b0381111561116157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561119a57816020015b611187612be7565b81526020019060019003908161117f5790505b50905060005b60038301548110156112aa57600b60008460030183815481106111d357634e487b7160e01b600052603260045260246000fd5b906000526020600020015481526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820180548060200260200160405190810160405280929190818152602001828054801561126457602002820191906000526020600020905b815481526020019060010190808311611250575b50505050508152505082828151811061128d57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526112a3600182613bb4565b90506111a0565b509392505050565b6112ba611fc6565b6001600160a01b03166112cb6115ee565b6001600160a01b0316146112f15760405162461bcd60e51b81526004016108fe9061388c565b601255565b6000611300610c8c565b821061131e5760405162461bcd60e51b81526004016108fe90613aaf565b6008828154811061133f57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b73516dbdc188213e01f625bc3d8ef87df48eb68c5381565b6000818152600260205260408120546001600160a01b0316806108255760405162461bcd60e51b81526004016108fe9061373c565b600f80546113ab90613c42565b80601f01602080910402602001604051908101604052809291908181526020018280546113d790613c42565b80156114245780601f106113f957610100808354040283529160200191611424565b820191906000526020600020905b81548152906001019060200180831161140757829003601f168201915b505050505081565b60105481565b60006001600160a01b03821661145a5760405162461bcd60e51b81526004016108fe906136f2565b506001600160a01b031660009081526003602052604090205490565b61147e611fc6565b6001600160a01b031661148f6115ee565b6001600160a01b0316146114b55760405162461bcd60e51b81526004016108fe9061388c565b6114bf60006121ea565b565b61277581565b600c5481565b3373516dbdc188213e01f625bc3d8ef87df48eb68c53148061150257503373396823f49aa9f0e3fac4b939bc27ad5cd88264db145b8061152557506115106115ee565b6001600160a01b0316336001600160a01b0316145b6115415760405162461bcd60e51b81526004016108fe90613afb565b476402540be4008110156115675760405162461bcd60e51b81526004016108fe90613408565b600061157f606461157984600561223c565b9061224f565b905061159f73516dbdc188213e01f625bc3d8ef87df48eb68c538261225b565b6115d373396823f49aa9f0e3fac4b939bc27ad5cd88264db6103e86115c48486613bff565b6115ce9190613bff565b61225b565b5050565b60006010546127756115e99190613bff565b905090565b600a546001600160a01b031690565b6000600c54620151806116109190613bb4565b421115905090565b60606001805461085490613c42565b61162f611fc6565b6001600160a01b03166116406115ee565b6001600160a01b0316146116665760405162461bcd60e51b81526004016108fe9061388c565b612775601054106116895760405162461bcd60e51b81526004016108fe90613862565b808251146116a95760405162461bcd60e51b81526004016108fe90613665565b6000816010546116b99190613bb4565b90506127758111156116ca57506127755b6010545b818110156117575783601054826116e59190613bff565b8151811061170357634e487b7160e01b600052603260045260246000fd5b6020026020010151600e60008381526020019081526020016000209080519060200190611731929190612b63565b5061173b816122d7565b611745858261238b565b8061174f81613c7d565b9150506116ce565b50601055505050565b611768611fc6565b6001600160a01b03166117796115ee565b6001600160a01b03161461179f5760405162461bcd60e51b81526004016108fe9061388c565b80516115d390600f906020840190612b63565b6117ba611fc6565b6001600160a01b0316826001600160a01b031614156117eb5760405162461bcd60e51b81526004016108fe90613594565b80600560006117f8611fc6565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff19169215159290921790915561183c611fc6565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161187491906133ea565b60405180910390a35050565b808214156118a05760405162461bcd60e51b81526004016108fe90613785565b336118aa83611369565b6001600160a01b03161480156118d05750336118c582611369565b6001600160a01b0316145b6118ec5760405162461bcd60e51b81526004016108fe90613a84565b60006127756011546118fe9190613bb4565b905061190b8383836123a5565b611915338261238b565b6000818152600e60209081526040909120855161193492870190612b63565b506001601160008282546119489190613bb4565b909155505060405181907f8ef1ea5ce94d405f55ffed5be4e495bdf6a9363d5b7af4fe3f4d66678d4ac84f90600090a250505050565b61198f611989611fc6565b83612038565b6119ab5760405162461bcd60e51b81526004016108fe90613a33565b6119b784848484612498565b50505050565b6119c5611fc6565b6001600160a01b03166119d66115ee565b6001600160a01b0316146119fc5760405162461bcd60e51b81526004016108fe9061388c565b600d805460ff191682151517908190556040517f10e1c3fcaff06b68391033547e8f9bb8067d7c4a2e32659b0629153814d242d391611a409160ff909116906133ea565b60405180910390a150565b66f8b0a10e47000081565b600d5460ff1615611a795760405162461bcd60e51b81526004016108fe906137f1565b611a816115fd565b15611adb57601254611ab933604051602001611a9d9190613236565b60405160208183030381529060405280519060200120846124cb565b14611ad65760405162461bcd60e51b81526004016108fe906139c5565b611b0f565b601354611af282604051602001611a9d9190613261565b14611b0f5760405162461bcd60e51b81526004016108fe906135cb565b61277560105410611b325760405162461bcd60e51b81526004016108fe906135f6565b66f8b0a10e470000341015611b595760405162461bcd60e51b81526004016108fe90613959565b611b646010546122d7565b611b703360105461238b565b6010546040517fe022f58b17edead5c8a541758e9b66796ebfbf27d6fd8044500f2468ac6e39fc90600090a2600160106000828254611baf9190613bb4565b90915550505050565b6060611bc382611fa9565b611bdf5760405162461bcd60e51b81526004016108fe9061390a565b612775821015611c1b57600f611bf48361257c565b604051602001611c0592919061327d565b6040516020818303038152906040529050610828565b6000828152600e602052604090208054611c3490613c42565b80601f0160208091040260200160405190810160405280929190818152602001828054611c6090613c42565b8015611cad5780601f10611c8257610100808354040283529160200191611cad565b820191906000526020600020905b815481529060010190602001808311611c9057829003601f168201915b50505050509050919050565b611cc1611fc6565b6001600160a01b0316611cd26115ee565b6001600160a01b031614611cf85760405162461bcd60e51b81526004016108fe9061388c565b601355565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60606000611d3984846109bb565b9050600081516001600160401b03811115611d6457634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611d9d57816020015b611d8a612be7565b815260200190600190039081611d825790505b50905060005b8251811015611ea457600b6000848381518110611dd057634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020018280548015611e5e57602002820191906000526020600020905b815481526020019060010190808311611e4a575b505050505081525050828281518110611e8757634e487b7160e01b600052603260045260246000fd5b6020908102919091010152611e9d600182613bb4565b9050611da3565b50949350505050565b611eb5611fc6565b6001600160a01b0316611ec66115ee565b6001600160a01b031614611eec5760405162461bcd60e51b81526004016108fe9061388c565b42600c55565b611efa611fc6565b6001600160a01b0316611f0b6115ee565b6001600160a01b031614611f315760405162461bcd60e51b81526004016108fe9061388c565b6001600160a01b038116611f575760405162461bcd60e51b81526004016108fe906134d3565b611f60816121ea565b50565b3b151590565b60006001600160e01b031982166380ac58cd60e01b1480611f9a57506001600160e01b03198216635b5e139f60e01b145b80610825575061082582612696565b6000908152600260205260409020546001600160a01b0316151590565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611fff82611369565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061204382611fa9565b61205f5760405162461bcd60e51b81526004016108fe90613619565b600061206a83611369565b9050806001600160a01b0316846001600160a01b031614806120a55750836001600160a01b031661209a846108d7565b6001600160a01b0316145b806120b557506120b58185611cfd565b949350505050565b826001600160a01b03166120d082611369565b6001600160a01b0316146120f65760405162461bcd60e51b81526004016108fe906138c1565b6001600160a01b03821661211c5760405162461bcd60e51b81526004016108fe90613550565b6121278383836126af565b612132600082611fca565b6001600160a01b038316600090815260036020526040812080546001929061215b908490613bff565b90915550506001600160a01b0382166000908152600360205260408120805460019290612189908490613bb4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006122488284613be0565b9392505050565b60006122488284613bcc565b6000826001600160a01b03168260405161227490613323565b60006040518083038185875af1925050503d80600081146122b1576040519150601f19603f3d011682016040523d82523d6000602084013e6122b6565b606091505b50509050806109b65760405162461bcd60e51b81526004016108fe90613a09565b6040518060800160405280600081526020016000198152602001600019815260200160006001600160401b0381111561232057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612349578160200160208202803683370190505b5090526000828152600b602090815260409182902083518155838201516001820155918301516002830155606083015180516119b79260038501920190612c0f565b6115d3828260405180602001604052806000815250612738565b60405180608001604052806000815260200184815260200183815260200160006001600160401b038111156123ea57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612413578160200160208202803683370190505b5090526000828152600b602090815260409182902083518155838201516001820155918301516002830155606083015180516124559260038501920190612c0f565b5050506000928352600b60209081526040808520600390810180546001818101835591885284882001859055948652908520018054938401815584529092200155565b6124a38484846120bd565b6124af8484848461276b565b6119b75760405162461bcd60e51b81526004016108fe90613481565b600082815b83518110156112aa5760008482815181106124fb57634e487b7160e01b600052603260045260246000fd5b602002602001015190508083101561253d578281604051602001612520929190613253565b604051602081830303815290604052805190602001209250612569565b8083604051602001612550929190613253565b6040516020818303038152906040528051906020012092505b508061257481613c7d565b9150506124d0565b6060816125a157506040805180820190915260018152600360fc1b6020820152610828565b8160005b81156125cb57806125b581613c7d565b91506125c49050600a83613bcc565b91506125a5565b6000816001600160401b038111156125f357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561261d576020820181803683370190505b5090505b84156120b557612632600183613bff565b915061263f600a86613c98565b61264a906030613bb4565b60f81b81838151811061266d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535061268f600a86613bcc565b9450612621565b6001600160e01b031981166301ffc9a760e01b14919050565b6126ba8383836109b6565b6001600160a01b0383166126d6576126d181612886565b6126f9565b816001600160a01b0316836001600160a01b0316146126f9576126f983826128ca565b6001600160a01b0382166127155761271081612967565b6109b6565b826001600160a01b0316826001600160a01b0316146109b6576109b68282612a40565b6127428383612a84565b61274f600084848461276b565b6109b65760405162461bcd60e51b81526004016108fe90613481565b600061277f846001600160a01b0316611f63565b1561287b57836001600160a01b031663150b7a0261279b611fc6565b8786866040518563ffffffff1660e01b81526004016127bd949392919061333a565b602060405180830381600087803b1580156127d757600080fd5b505af1925050508015612807575060408051601f3d908101601f191682019092526128049181019061308d565b60015b612861573d808015612835576040519150601f19603f3d011682016040523d82523d6000602084013e61283a565b606091505b5080516128595760405162461bcd60e51b81526004016108fe90613481565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506120b5565b506001949350505050565b600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b600060016128d784611432565b6128e19190613bff565b600083815260076020526040902054909150808214612934576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061297990600190613bff565b600083815260096020526040812054600880549394509092849081106129af57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600883815481106129de57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612a2457634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000612a4b83611432565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b038216612aaa5760405162461bcd60e51b81526004016108fe906137bc565b612ab381611fa9565b15612ad05760405162461bcd60e51b81526004016108fe90613519565b612adc600083836126af565b6001600160a01b0382166000908152600360205260408120805460019290612b05908490613bb4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054612b6f90613c42565b90600052602060002090601f016020900481019282612b915760008555612bd7565b82601f10612baa57805160ff1916838001178555612bd7565b82800160010185558215612bd7579182015b82811115612bd7578251825591602001919060010190612bbc565b50612be3929150612c49565b5090565b6040518060800160405280600081526020016000815260200160008152602001606081525090565b828054828255906000526020600020908101928215612bd75791602002820182811115612bd7578251825591602001919060010190612bbc565b5b80821115612be35760008155600101612c4a565b60006001600160401b03831115612c7757612c77613cd8565b612c8a601f8401601f1916602001613b5c565b9050828152838383011115612c9e57600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b038116811461082857600080fd5b8035801515811461082857600080fd5b600082601f830112612cec578081fd5b61224883833560208501612c5e565b600060208284031215612d0c578081fd5b61224882612cb5565b60008060408385031215612d27578081fd5b612d3083612cb5565b9150612d3e60208401612cb5565b90509250929050565b600080600060608486031215612d5b578081fd5b612d6484612cb5565b9250612d7260208501612cb5565b9150604084013590509250925092565b60008060008060808587031215612d97578081fd5b612da085612cb5565b9350612dae60208601612cb5565b92506040850135915060608501356001600160401b03811115612dcf578182fd5b8501601f81018713612ddf578182fd5b612dee87823560208401612c5e565b91505092959194509250565b600080600060608486031215612e0e578283fd5b612e1784612cb5565b92506020808501356001600160401b03811115612e32578384fd5b8501601f81018713612e42578384fd5b8035612e55612e5082613b85565b613b5c565b81815283810190838501875b84811015612e8a57612e788c888435890101612cdc565b84529286019290860190600101612e61565b50508096505050505050604084013590509250925092565b60008060408385031215612eb4578182fd5b612ebd83612cb5565b9150612d3e60208401612ccc565b60008060408385031215612edd578182fd5b612ee683612cb5565b946020939093013593505050565b60008060408385031215612f06578182fd5b82356001600160401b0380821115612f1c578384fd5b818501915085601f830112612f2f578384fd5b81356020612f3f612e5083613b85565b82815281810190858301838502870184018b1015612f5b578889fd5b8896505b84871015612f7d578035835260019690960195918301918301612f5f565b5096505086013592505080821115612f93578283fd5b50612fa085828601612cdc565b9150509250929050565b60008060408385031215612fbc578182fd5b82356001600160401b03811115612fd1578283fd5b8301601f81018513612fe1578283fd5b80356020612ff1612e5083613b85565b82815281810190848301838502860184018a101561300d578788fd5b8795505b8486101561302f578035835260019590950194918301918301613011565b5098969091013596505050505050565b600060208284031215613050578081fd5b61224882612ccc565b60006020828403121561306a578081fd5b5035919050565b600060208284031215613082578081fd5b813561224881613cee565b60006020828403121561309e578081fd5b815161224881613cee565b6000602082840312156130ba578081fd5b81356001600160401b038111156130cf578182fd5b6120b584828501612cdc565b6000806000606084860312156130ef578081fd5b83356001600160401b03811115613104578182fd5b61311086828701612cdc565b9660208601359650604090950135949350505050565b60008060408385031215613138578182fd5b8235915060208301356001600160401b03811115613154578182fd5b612fa085828601612cdc565b60008060408385031215613172578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b838110156131b057815187529582019590820190600101613194565b509495945050505050565b600081518084526131d3816020860160208601613c16565b601f01601f19169290920160200192915050565b600081516131f9818560208601613c16565b9290920192915050565b60008151835260208201516020840152604082015160408401526060820151608060608501526120b56080850182613181565b60609190911b6bffffffffffffffffffffffff1916815260140190565b918252602082015260400190565b60008251613273818460208701613c16565b9190910192915050565b825460009081906002810460018083168061329957607f831692505b60208084108214156132b957634e487b7160e01b87526022600452602487fd5b8180156132cd57600181146132de5761330a565b60ff1986168952848901965061330a565b6132e78b613ba8565b885b868110156133025781548b8201529085019083016132e9565b505084890196505b50505050505061331a81856131e7565b95945050505050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061336d908301846131bb565b9695505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156133ca57603f198886030184526133b8858351613203565b9450928501929085019060010161339c565b5092979650505050505050565b6000602082526122486020830184613181565b901515815260200190565b60006020825261224860208301846131bb565b60208082526014908201527310985b185b98d9481a5cc81d1bdbc81cdb585b1b60621b604082015260600190565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201526a74206f6620626f756e647360a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b602080825260119082015270139bdd08185d5d1a195b9d1a58d85d1959607a1b604082015260600190565b60208082526009908201526813585e081b1a5b5a5d60ba1b604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252601690820152750a8ded6cadcaae4d2e640e6d0deead8c840dac2e8c6d60531b604082015260600190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252601a908201527f506172656e74732073686f756c64206e6f742062652073616d65000000000000604082015260600190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252600b908201526a14d85b194814185d5cd95960aa1b604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526010908201526f4e6f20756e736f6c6420746f6b656e7360801b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526011908201527056616c75652062656c6f7720707269636560781b604082015260600190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526024908201527f41646472657373206973206e6f7420696e636c7564656420696e207768697465604082015263131a5cdd60e21b606082015260800190565b60208082526010908201526f2a3930b739b332b9103330b4b632b21760811b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526011908201527014185c995b9d1cc81b9bdd08195e1a5cdd607a1b604082015260600190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201526b7574206f6620626f756e647360a01b606082015260800190565b60208082526025908201527f596f7520646f6e27742068617665207769746864726177696e672070726976696040820152646c6564676560d81b606082015260800190565b6000602082526122486020830184613203565b90815260200190565b6040518181016001600160401b0381118282101715613b7d57613b7d613cd8565b604052919050565b60006001600160401b03821115613b9e57613b9e613cd8565b5060209081020190565b60009081526020902090565b60008219821115613bc757613bc7613cac565b500190565b600082613bdb57613bdb613cc2565b500490565b6000816000190483118215151615613bfa57613bfa613cac565b500290565b600082821015613c1157613c11613cac565b500390565b60005b83811015613c31578181015183820152602001613c19565b838111156119b75750506000910152565b600281046001821680613c5657607f821691505b60208210811415613c7757634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613c9157613c91613cac565b5060010190565b600082613ca757613ca7613cc2565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114611f6057600080fdfea2646970667358221220474c82ddcfb13b18476205b2bc626031b29667b8401edeba009e1121ea94453f64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 129,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 131,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 135,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 139,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 143,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 149,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1068,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1072,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1075,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1079,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 3083,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_heros",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Hero)3078_storage)"
      },
      {
        "astId": 2355,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "startTime",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2358,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "bPaused",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 2362,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_tokenUris",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2364,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "baseURI",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 2367,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "mintedInitialTokenCount",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2370,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "breedTokenCount",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2373,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_rootWhitelist",
        "offset": 0,
        "slot": "18",
        "type": "t_bytes32"
      },
      {
        "astId": 2376,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_rootAuth",
        "offset": 0,
        "slot": "19",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Hero)3078_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct HeroFactory.Hero)",
        "numberOfBytes": "32",
        "value": "t_struct(Hero)3078_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Hero)3078_storage": {
        "encoding": "inplace",
        "label": "struct HeroFactory.Hero",
        "members": [
          {
            "astId": 3070,
            "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
            "label": "traits",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3072,
            "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
            "label": "fatherId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3074,
            "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
            "label": "motherId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3077,
            "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
            "label": "childrenIds",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}