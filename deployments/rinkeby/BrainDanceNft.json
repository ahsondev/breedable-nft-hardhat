{
  "address": "0x590968697C8b92672F9e8d6e7F86DC71892B7cFF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "MintedNewNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pause",
          "type": "bool"
        }
      ],
      "name": "PauseEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ABC_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BREED_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INITIAL_TOKEN_COUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TEST_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addrs",
          "type": "address[]"
        }
      ],
      "name": "addWhiteLists",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "array",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "val",
          "type": "uint256"
        }
      ],
      "name": "findIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "getChildren",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "traits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fatherId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "motherId",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "childrenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct HeroFactory.Hero[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "heroId1_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "heroId2_",
          "type": "uint256"
        }
      ],
      "name": "getChildrenIdsWithParent",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "heroId1_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "heroId2_",
          "type": "uint256"
        }
      ],
      "name": "getChildrenWithParent",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "traits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fatherId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "motherId",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "childrenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct HeroFactory.Hero[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "getHero",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "traits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fatherId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "motherId",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "childrenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct HeroFactory.Hero",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "getParent",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "traits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fatherId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "motherId",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "childrenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct HeroFactory.Hero[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isWhiteList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenUri_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "heroId1_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "heroId2_",
          "type": "uint256"
        }
      ],
      "name": "mintBreedToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "tokenUris_",
          "type": "string[]"
        }
      ],
      "name": "mintUnsoldTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintedInitialTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remainTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "removeWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "pause",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setStarttime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenUri_",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whiteList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2ea49d51587a351b67c562fe8df42fa7456f2b1b7c66ebf889a2a6eca85fa501",
  "receipt": {
    "to": null,
    "from": "0xA5DBC34d69B745d5ee9494E6960a811613B9ae32",
    "contractAddress": "0x590968697C8b92672F9e8d6e7F86DC71892B7cFF",
    "transactionIndex": 18,
    "gasUsed": "3546792",
    "logsBloom": "0x
    "blockHash": "0x84da5b4a71a87401511d9ca2dc05a53bba745f311d0f363b4d94b0aa9e747a63",
    "transactionHash": "0x2ea49d51587a351b67c562fe8df42fa7456f2b1b7c66ebf889a2a6eca85fa501",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 9648416,
        "transactionHash": "0x2ea49d51587a351b67c562fe8df42fa7456f2b1b7c66ebf889a2a6eca85fa501",
        "address": "0x590968697C8b92672F9e8d6e7F86DC71892B7cFF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a5dbc34d69b745d5ee9494e6960a811613b9ae32"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0x84da5b4a71a87401511d9ca2dc05a53bba745f311d0f363b4d94b0aa9e747a63"
      }
    ],
    "blockNumber": 9648416,
    "cumulativeGasUsed": "4845433",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "BrainDanceNft",
    "BrainDance",
    "https://gateway.pinata.cloud/ipfs/Qmc2eWRG4Pv6N4rrDwYABF4YJhNsQCYLn4WV8HcPpLxYNp/"
  ],
  "solcInputHash": "33dd363e23cc67c6d5306bd8c83c4b76",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MintedNewNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"PauseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ABC_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BREED_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_TOKEN_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEST_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addWhiteLists\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"array\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"findIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getChildren\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"traits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fatherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"motherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"childrenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct HeroFactory.Hero[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"heroId1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"heroId2_\",\"type\":\"uint256\"}],\"name\":\"getChildrenIdsWithParent\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"heroId1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"heroId2_\",\"type\":\"uint256\"}],\"name\":\"getChildrenWithParent\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"traits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fatherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"motherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"childrenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct HeroFactory.Hero[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getHero\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"traits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fatherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"motherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"childrenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct HeroFactory.Hero\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getParent\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"traits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fatherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"motherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"childrenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct HeroFactory.Hero[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenUri_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"heroId1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"heroId2_\",\"type\":\"uint256\"}],\"name\":\"mintBreedToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"tokenUris_\",\"type\":\"string[]\"}],\"name\":\"mintUnsoldTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedInitialTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setStarttime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenUri_\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BrainDanceNft.sol\":\"BrainDanceNft\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/BrainDanceNft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"./HeroFactory.sol\\\";\\r\\n\\r\\ncontract BrainDanceNft is ERC721Enumerable, Ownable, HeroFactory {\\r\\n    using SafeMath for uint256;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // initial token count\\r\\n    uint256 public constant INITIAL_TOKEN_COUNT = 10101;\\r\\n\\r\\n    // initial token price\\r\\n    uint256 public constant MINT_PRICE = 0.07 ether;\\r\\n    uint256 public constant BREED_PRICE = 0.026 ether;\\r\\n    \\r\\n    // creator's addresses\\r\\n    address public constant ABC_ADDRESS = 0x396823F49AA9f0e3FAC4b939Bc27aD5cD88264Db;\\r\\n    address public constant TEST_ADDRESS = 0xA5DBC34d69B745d5ee9494E6960a811613B9ae32;\\r\\n\\r\\n    // whitelist\\r\\n    mapping (address => bool) public whiteList;\\r\\n    uint public startTime;\\r\\n\\r\\n    // if true, stops minting\\r\\n    bool private bPaused = false;\\r\\n\\r\\n    // token's URI\\r\\n    mapping (uint256 => string) private _tokenUris;\\r\\n    string public baseURI;\\r\\n\\r\\n    uint256 public mintedInitialTokenCount = 0;\\r\\n\\r\\n    // breed tokens\\r\\n    uint256 private breedTokenCount = 0;\\r\\n\\r\\n    // events\\r\\n    event PauseEvent(bool pause);\\r\\n    event MintedNewNFT(uint256 indexed tokenId);\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_, string memory baseURI_) ERC721(name_, symbol_) {\\r\\n        // mark start time for whitelist\\r\\n        startTime = block.timestamp;\\r\\n        baseURI = baseURI_;\\r\\n        \\r\\n        address[] memory addrs = new address[](2);\\r\\n        addrs[0] = ABC_ADDRESS;\\r\\n        addrs[1] = TEST_ADDRESS;\\r\\n\\r\\n        addWhiteLists(addrs);\\r\\n\\r\\n        // should mint #000000\\r\\n    }\\r\\n\\r\\n    function setTokenURI(uint256 tokenId_, string memory tokenUri_) public onlyOwner {\\r\\n        _tokenUris[tokenId_] = tokenUri_;\\r\\n    }\\r\\n\\r\\n    function remainTokenCount() public view returns (uint256) {\\r\\n        return INITIAL_TOKEN_COUNT - mintedInitialTokenCount;\\r\\n    }\\r\\n\\r\\n    function mint() public payable {\\r\\n        require(!bPaused, \\\"Sale Paused\\\");\\r\\n        if (block.timestamp <= startTime + 4 hours) {\\r\\n            require(isWhiteList(msg.sender), \\\"Address is not included in whiteList\\\");\\r\\n        }\\r\\n        require(mintedInitialTokenCount < INITIAL_TOKEN_COUNT, \\\"Max limit\\\");\\r\\n        require(msg.value >= MINT_PRICE, \\\"Value below price\\\");\\r\\n\\r\\n        _tokenUris[mintedInitialTokenCount] = string(abi.encodePacked(baseURI, mintedInitialTokenCount.toString()));\\r\\n        _mintHero(mintedInitialTokenCount);\\r\\n        _safeMint(msg.sender, mintedInitialTokenCount);\\r\\n        emit MintedNewNFT(mintedInitialTokenCount);\\r\\n        mintedInitialTokenCount += 1;\\r\\n    }\\r\\n\\r\\n    function walletOfOwner(address owner) external view returns (uint256[] memory) {\\r\\n        uint256 tokenCount = balanceOf(owner);\\r\\n        uint256[] memory tokensId = new uint256[](tokenCount);\\r\\n        uint256 iToken = 0;\\r\\n        uint256 total = totalSupply();\\r\\n        for (uint256 i = 0; i < total; i++) {\\r\\n            if (ownerOf(tokenByIndex(i)) == owner) {\\r\\n                tokensId[iToken++] = i;\\r\\n            }\\r\\n        }\\r\\n        return tokensId;\\r\\n    }\\r\\n\\r\\n    function setPause(bool pause) public onlyOwner {\\r\\n        bPaused = pause;\\r\\n        emit PauseEvent(bPaused);\\r\\n    }\\r\\n\\r\\n    function withdrawAll() external {\\r\\n        require(msg.sender == ABC_ADDRESS || msg.sender == TEST_ADDRESS, \\\"You don't have withdrawing priviledge\\\");\\r\\n        uint256 balance = address(this).balance;\\r\\n        require(balance > 0);\\r\\n        _widthdraw(ABC_ADDRESS, balance.mul(5).div(100));\\r\\n        _widthdraw(TEST_ADDRESS, balance.mul(90).div(100));\\r\\n    }\\r\\n\\r\\n    function _widthdraw(address _address, uint256 _amount) private {\\r\\n        (bool success, ) = _address.call{value: _amount}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed.\\\");\\r\\n    }\\r\\n\\r\\n    function mintUnsoldTokens(address to_, string[] memory tokenUris_) public onlyOwner {\\r\\n        require(tokenUris_.length == INITIAL_TOKEN_COUNT - mintedInitialTokenCount + 1, \\\"TokenUris should match\\\");\\r\\n\\r\\n        for (uint256 i = mintedInitialTokenCount; i < INITIAL_TOKEN_COUNT; i++) {\\r\\n            _tokenUris[mintedInitialTokenCount + i] = tokenUris_[i - mintedInitialTokenCount];\\r\\n            _mintHero(mintedInitialTokenCount + i);\\r\\n            _safeMint(to_, mintedInitialTokenCount + i);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // add whitelist\\r\\n    function addWhiteLists(address[] memory addrs) public onlyOwner {\\r\\n        for (uint i = 0; i < addrs.length; i += 1) {\\r\\n            whiteList[addrs[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isWhiteList(address addr) public view returns(bool) {\\r\\n        return whiteList[addr];\\r\\n    }\\r\\n\\r\\n    // remove whitelist\\r\\n    function removeWhiteList(address addr) public onlyOwner {\\r\\n        require(whiteList[addr], \\\"Already removed\\\");\\r\\n        whiteList[addr] = false;\\r\\n    }\\r\\n\\r\\n    function mintBreedToken(string memory tokenUri_, uint256 heroId1_, uint256 heroId2_) public payable {\\r\\n        require(msg.value >= BREED_PRICE, \\\"Value below price\\\");\\r\\n        uint256 tokenId = breedTokenCount + INITIAL_TOKEN_COUNT;\\r\\n        _breedHero(heroId1_, heroId2_, tokenId);\\r\\n        _safeMint(msg.sender, tokenId);\\r\\n        _tokenUris[tokenId] = tokenUri_;\\r\\n        breedTokenCount += 1;\\r\\n        emit MintedNewNFT(tokenId);\\r\\n    }\\r\\n\\r\\n    // breed token's tokenURI\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n        return _tokenUris[tokenId];\\r\\n    }\\r\\n\\r\\n    function setStarttime() public onlyOwner {\\r\\n        startTime = block.timestamp;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x08931f7c5bc994ef6272b738272123b3999aaae3200c72b1fe179d642cad4cec\",\"license\":\"MIT\"},\"contracts/HeroFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract HeroFactory {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    struct Hero {\\r\\n        uint256 traits;\\r\\n        // ancestor\\r\\n        uint256 fatherId;\\r\\n        uint256 motherId;\\r\\n        uint256[] childrenIds;\\r\\n    }\\r\\n\\r\\n    mapping (uint256 => Hero) internal _heros;\\r\\n\\r\\n    uint256 constant MAX_INT = 2**256 - 1;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function _mintHero(uint256 tokenId_) internal {\\r\\n        _heros[tokenId_] = Hero(0, MAX_INT, MAX_INT, new uint256[](0));\\r\\n    }\\r\\n\\r\\n    function _breedHero(uint256 heroId1_, uint256 heroId2_, uint256 tokenId_) internal {\\r\\n        // create a child\\r\\n        _heros[tokenId_] = Hero(0, heroId1_, heroId2_, new uint256[](0));\\r\\n\\r\\n        // add child id\\r\\n        _heros[heroId1_].childrenIds.push(tokenId_);\\r\\n        _heros[heroId2_].childrenIds.push(tokenId_);\\r\\n    }\\r\\n\\r\\n    function getHero(uint256 tokenId_) external view returns (Hero memory) {\\r\\n        return _heros[tokenId_];\\r\\n    }\\r\\n\\r\\n    function getParent(uint256 tokenId_) external view returns (Hero[] memory) {\\r\\n        Hero[] memory parent;\\r\\n        Hero storage hero = _heros[tokenId_];\\r\\n        if (hero.fatherId != MAX_INT) {\\r\\n            parent = new Hero[](2);\\r\\n            parent[0] = _heros[hero.fatherId];\\r\\n            parent[1] = _heros[hero.motherId];\\r\\n        }\\r\\n        return parent;\\r\\n    }\\r\\n\\r\\n    function getChildren(uint256 tokenId_) external view returns (Hero[] memory) {\\r\\n        Hero storage hero = _heros[tokenId_];\\r\\n        Hero[] memory children = new Hero[](hero.childrenIds.length);\\r\\n        for (uint i = 0; i < hero.childrenIds.length; i += 1) {\\r\\n            children[i] = _heros[hero.childrenIds[i]];\\r\\n        }\\r\\n        return children;\\r\\n    }\\r\\n\\r\\n    function getChildrenIdsWithParent(uint256 heroId1_, uint256 heroId2_) public view returns (uint256[] memory) {\\r\\n        Hero storage hero1 = _heros[heroId1_];\\r\\n        uint256 count = 0;\\r\\n        uint256[] memory ret = new uint256[](hero1.childrenIds.length);\\r\\n        count = 0;\\r\\n        for (uint i = 0; i < hero1.childrenIds.length; i += 1) {\\r\\n            if (findIndex(_heros[heroId2_].childrenIds, hero1.childrenIds[i]) < _heros[heroId2_].childrenIds.length) {\\r\\n                ret[count++] = hero1.childrenIds[i];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256[] memory ret1 = new uint256[](count);\\r\\n        count = 0;\\r\\n        for (uint i = 0; i < ret.length; i += 1) {\\r\\n            ret1[i] = ret[i];\\r\\n        }\\r\\n\\r\\n        return ret1;\\r\\n    }\\r\\n\\r\\n    function getChildrenWithParent(uint256 heroId1_, uint256 heroId2_) external view returns (Hero[] memory) {\\r\\n        uint256[] memory ids = getChildrenIdsWithParent(heroId1_, heroId2_);\\r\\n        Hero[] memory ret = new Hero[](ids.length);\\r\\n        for (uint i = 0; i < ids.length; i += 1) {\\r\\n            ret[i] = _heros[ids[i]];\\r\\n        }\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    function findIndex(uint256[] memory array, uint256 val) public pure returns (uint256) {\\r\\n        for (uint i = 0; i < array.length; i += 1) {\\r\\n            if (array[i] == val) {\\r\\n                return i;\\r\\n            }\\r\\n        }\\r\\n        return array.length;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x797d2b69b7008ffc2746f1871633d9c63bfc4d44e02da6f763b0b3c1e2f400f3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600e805460ff19169055600060118190556012553480156200002557600080fd5b5060405162003fe538038062003fe583398101604081905262000048916200040e565b82518390839062000061906000906020850190620002bd565b50805162000077906001906020840190620002bd565b505050620000946200008e6200018a60201b60201c565b6200018e565b42600d558051620000ad906010906020840190620002bd565b5060408051600280825260608201835260009260208301908036833701905050905073396823f49aa9f0e3fac4b939bc27ad5cd88264db816000815181106200010657634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073a5dbc34d69b745d5ee9494e6960a811613b9ae32816001815181106200015d57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101526200018081620001e0565b5050505062000548565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620001ea6200018a565b6001600160a01b0316620001fd620002ae565b6001600160a01b0316146200022f5760405162461bcd60e51b815260040162000226906200049b565b60405180910390fd5b60005b8151811015620002aa576001600c60008484815181106200026357634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055620002a2600182620004d0565b905062000232565b5050565b600a546001600160a01b031690565b828054620002cb90620004f5565b90600052602060002090601f016020900481019282620002ef57600085556200033a565b82601f106200030a57805160ff19168380011785556200033a565b828001600101855582156200033a579182015b828111156200033a5782518255916020019190600101906200031d565b50620003489291506200034c565b5090565b5b808211156200034857600081556001016200034d565b600082601f83011262000374578081fd5b81516001600160401b038082111562000391576200039162000532565b6040516020601f8401601f1916820181018381118382101715620003b957620003b962000532565b6040528382528584018101871015620003d0578485fd5b8492505b83831015620003f35785830181015182840182015291820191620003d4565b838311156200040457848185840101525b5095945050505050565b60008060006060848603121562000423578283fd5b83516001600160401b03808211156200043a578485fd5b620004488783880162000363565b945060208601519150808211156200045e578384fd5b6200046c8783880162000363565b9350604086015191508082111562000482578283fd5b50620004918682870162000363565b9150509250925092565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115620004f057634e487b7160e01b81526011600452602481fd5b500190565b6002810460018216806200050a57607f821691505b602082108114156200052c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b613a8d80620005586000396000f3fe60806040526004361061027d5760003560e01c80636c26eab91161014f578063b88d4fde116100c1578063dc31d1d61161007a578063dc31d1d61461071e578063e985e9c51461073e578063eda9d4741461075e578063f0a65d1a1461077e578063f2fde38b14610793578063f99031a7146107b35761027d565b8063b88d4fde1461067f578063bedb86fb1461069f578063bf424e7e146106bf578063c002d23d146106d4578063c87b56dd146106e9578063d1d6222a146107095761027d565b8063853828b611610113578063853828b6146105f85780638d0419881461060d5780638da5cb5b1461062257806395d89b4114610637578063a22cb4651461064c578063aad665161461066c5761027d565b80636c26eab91461058457806370a0823114610599578063715018a6146105b9578063755cb234146105ce57806378e97925146105e35761027d565b806323b872dd116101f3578063438b6300116101ac578063438b6300146104da57806349ae8dc3146104fa5780634f6ccce71461051a578063594ebab71461053a5780636352211e1461054f5780636c0360eb1461056f5761027d565b806323b872dd1461040d5780632f745c591461042d578063372c12b11461044d5780633d99de851461046d578063414533de1461048d57806342842e0e146104ba5761027d565b8063105dacdf11610245578063105dacdf146103565780631249c58b14610376578063162094c41461037e57806318160ddd1461039e5780632042e5c2146103c057806321d80111146103e05761027d565b806301ffc9a71461028257806306fdde03146102b8578063081812fc146102da578063095ea7b3146103075780630970eaa314610329575b600080fd5b34801561028e57600080fd5b506102a261029d366004612ed7565b6107d3565b6040516102af91906131f9565b60405180910390f35b3480156102c457600080fd5b506102cd610800565b6040516102af9190613204565b3480156102e657600080fd5b506102fa6102f5366004612f5a565b610892565b6040516102af9190613135565b34801561031357600080fd5b50610327610322366004612d69565b6108de565b005b34801561033557600080fd5b50610349610344366004612fb6565b610976565b6040516102af91906131e6565b34801561036257600080fd5b50610327610371366004612d92565b610be0565b610327610c99565b34801561038a57600080fd5b50610327610399366004612f72565b610def565b3480156103aa57600080fd5b506103b3610e4d565b6040516102af91906138a6565b3480156103cc57600080fd5b506103276103db366004612ba3565b610e53565b3480156103ec57600080fd5b506104006103fb366004612f5a565b610eeb565b6040516102af9190613893565b34801561041957600080fd5b50610327610428366004612bef565b610f82565b34801561043957600080fd5b506103b3610448366004612d69565b610fba565b34801561045957600080fd5b506102a2610468366004612ba3565b61100c565b34801561047957600080fd5b506103b3610488366004612e28565b611021565b34801561049957600080fd5b506104ad6104a8366004612f5a565b61107f565b6040516102af9190613186565b3480156104c657600080fd5b506103276104d5366004612bef565b611262565b3480156104e657600080fd5b506103496104f5366004612ba3565b61127d565b34801561050657600080fd5b506104ad610515366004612f5a565b611373565b34801561052657600080fd5b506103b3610535366004612f5a565b611500565b34801561054657600080fd5b506102fa61155b565b34801561055b57600080fd5b506102fa61056a366004612f5a565b611573565b34801561057b57600080fd5b506102cd6115a8565b34801561059057600080fd5b506103b3611636565b3480156105a557600080fd5b506103b36105b4366004612ba3565b61163c565b3480156105c557600080fd5b50610327611680565b3480156105da57600080fd5b506103b36116cb565b3480156105ef57600080fd5b506103b36116d1565b34801561060457600080fd5b506103276116d7565b34801561061957600080fd5b506103b3611791565b34801561062e57600080fd5b506102fa6117a8565b34801561064357600080fd5b506102cd6117b7565b34801561065857600080fd5b50610327610667366004612d40565b6117c6565b61032761067a366004612f0f565b611894565b34801561068b57600080fd5b5061032761069a366004612c2a565b61194d565b3480156106ab57600080fd5b506103276106ba366004612ebd565b61198c565b3480156106cb57600080fd5b506103b3611a1a565b3480156106e057600080fd5b506103b3611a25565b3480156106f557600080fd5b506102cd610704366004612f5a565b611a30565b34801561071557600080fd5b506102fa611af5565b34801561072a57600080fd5b50610327610739366004612ca2565b611b0d565b34801561074a57600080fd5b506102a2610759366004612bbd565b611c3b565b34801561076a57600080fd5b506104ad610779366004612fb6565b611c69565b34801561078a57600080fd5b50610327611deb565b34801561079f57600080fd5b506103276107ae366004612ba3565b611e30565b3480156107bf57600080fd5b506102a26107ce366004612ba3565b611e9e565b60006001600160e01b0319821663780e9d6360e01b14806107f857506107f882611ebc565b90505b919050565b60606000805461080f90613995565b80601f016020809104026020016040519081016040528092919081815260200182805461083b90613995565b80156108885780601f1061085d57610100808354040283529160200191610888565b820191906000526020600020905b81548152906001019060200180831161086b57829003601f168201915b5050505050905090565b600061089d82611efc565b6108c25760405162461bcd60e51b81526004016108b990613595565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006108e982611573565b9050806001600160a01b0316836001600160a01b0316141561091d5760405162461bcd60e51b81526004016108b990613702565b806001600160a01b031661092f611f19565b6001600160a01b0316148061094b575061094b81610759611f19565b6109675760405162461bcd60e51b81526004016108b99061344b565b6109718383611f1d565b505050565b6000828152600b6020526040812060038101546060929081906001600160401b038111156109b457634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156109dd578160200160208202803683370190505b5090506000915060005b6003840154811015610b09576000868152600b6020908152604091829020600301805483518184028101840190945280845292610a8a929091908490830182828015610a5257602002820191906000526020600020905b815481526020019060010190808311610a3e575b5050505050866003018481548110610a7a57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154611021565b1015610af757836003018181548110610ab357634e487b7160e01b600052603260045260246000fd5b9060005260206000200154828480610aca906139d0565b955081518110610aea57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b610b02600182613907565b90506109e7565b506000826001600160401b03811115610b3257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b5b578160200160208202803683370190505b5090506000925060005b8251811015610bd357828181518110610b8e57634e487b7160e01b600052603260045260246000fd5b6020026020010151828281518110610bb657634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610bcc600182613907565b9050610b65565b5093505050505b92915050565b610be8611f19565b6001600160a01b0316610bf96117a8565b6001600160a01b031614610c1f5760405162461bcd60e51b81526004016108b9906135e1565b60005b8151811015610c95576001600c6000848481518110610c5157634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055610c8e600182613907565b9050610c22565b5050565b600e5460ff1615610cbc5760405162461bcd60e51b81526004016108b990613570565b600d54610ccb90613840613907565b4211610cf657610cda33611e9e565b610cf65760405162461bcd60e51b81526004016108b990613743565b61277560115410610d195760405162461bcd60e51b81526004016108b9906133ac565b66f8b0a10e470000341015610d405760405162461bcd60e51b81526004016108b9906136ae565b6010610d4d601154611f8b565b604051602001610d5e92919061308c565b60408051601f198184030181529181526011546000908152600f60209081529190208251610d9193919290910190612a0b565b50610d9d6011546120ad565b610da933601154612161565b6011546040517fe022f58b17edead5c8a541758e9b66796ebfbf27d6fd8044500f2468ac6e39fc90600090a2600160116000828254610de89190613907565b9091555050565b610df7611f19565b6001600160a01b0316610e086117a8565b6001600160a01b031614610e2e5760405162461bcd60e51b81526004016108b9906135e1565b6000828152600f60209081526040909120825161097192840190612a0b565b60085490565b610e5b611f19565b6001600160a01b0316610e6c6117a8565b6001600160a01b031614610e925760405162461bcd60e51b81526004016108b9906135e1565b6001600160a01b0381166000908152600c602052604090205460ff16610eca5760405162461bcd60e51b81526004016108b9906136d9565b6001600160a01b03166000908152600c60205260409020805460ff19169055565b610ef3612a8f565b6000828152600b60209081526040918290208251608081018452815481526001820154818401526002820154818501526003820180548551818602810186019096528086529194929360608601939290830182828015610f7257602002820191906000526020600020905b815481526020019060010190808311610f5e575b5050505050815250509050919050565b610f93610f8d611f19565b8261217b565b610faf5760405162461bcd60e51b81526004016108b9906137b1565b6109718383836121f8565b6000610fc58361163c565b8210610fe35760405162461bcd60e51b81526004016108b990613217565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600c6020526000908152604090205460ff1681565b6000805b8351811015611076578284828151811061104f57634e487b7160e01b600052603260045260246000fd5b60200260200101511415611064579050610bda565b61106f600182613907565b9050611025565b50509051919050565b6000818152600b60205260409020600181015460609182916000191461125b576040805160028082526060820190925290816020015b6110bd612a8f565b8152602001906001900390816110b5579050509150600b6000826001015481526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820180548060200260200160405190810160405280929190818152602001828054801561116157602002820191906000526020600020905b81548152602001906001019080831161114d575b5050505050815250508260008151811061118b57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250600b6000826002015481526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820180548060200260200160405190810160405280929190818152602001828054801561122557602002820191906000526020600020905b815481526020019060010190808311611211575b5050505050815250508260018151811061124f57634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b5092915050565b6109718383836040518060200160405280600081525061194d565b6060600061128a8361163c565b90506000816001600160401b038111156112b457634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156112dd578160200160208202803683370190505b5090506000806112eb610e4d565b905060005b8181101561136857866001600160a01b031661130e61056a83611500565b6001600160a01b0316141561135657808484611329816139d0565b95508151811061134957634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b80611360816139d0565b9150506112f0565b509195945050505050565b6000818152600b602052604081206003810154606092906001600160401b038111156113af57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156113e857816020015b6113d5612a8f565b8152602001906001900390816113cd5790505b50905060005b60038301548110156114f857600b600084600301838154811061142157634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382018054806020026020016040519081016040528092919081815260200182805480156114b257602002820191906000526020600020905b81548152602001906001019080831161149e575b5050505050815250508282815181106114db57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526114f1600182613907565b90506113ee565b509392505050565b600061150a610e4d565b82106115285760405162461bcd60e51b81526004016108b990613802565b6008828154811061154957634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b73396823f49aa9f0e3fac4b939bc27ad5cd88264db81565b6000818152600260205260408120546001600160a01b0316806107f85760405162461bcd60e51b81526004016108b9906134f2565b601080546115b590613995565b80601f01602080910402602001604051908101604052809291908181526020018280546115e190613995565b801561162e5780601f106116035761010080835404028352916020019161162e565b820191906000526020600020905b81548152906001019060200180831161161157829003601f168201915b505050505081565b60115481565b60006001600160a01b0382166116645760405162461bcd60e51b81526004016108b9906134a8565b506001600160a01b031660009081526003602052604090205490565b611688611f19565b6001600160a01b03166116996117a8565b6001600160a01b0316146116bf5760405162461bcd60e51b81526004016108b9906135e1565b6116c96000612325565b565b61277581565b600d5481565b3373396823f49aa9f0e3fac4b939bc27ad5cd88264db148061170c57503373a5dbc34d69b745d5ee9494e6960a811613b9ae32145b6117285760405162461bcd60e51b81526004016108b99061384e565b478061173357600080fd5b61176673396823f49aa9f0e3fac4b939bc27ad5cd88264db611761606461175b856005612377565b9061238a565b612396565b61178e73a5dbc34d69b745d5ee9494e6960a811613b9ae32611761606461175b85605a612377565b50565b60006011546127756117a39190613952565b905090565b600a546001600160a01b031690565b60606001805461080f90613995565b6117ce611f19565b6001600160a01b0316826001600160a01b031614156117ff5760405162461bcd60e51b81526004016108b990613375565b806005600061180c611f19565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155611850611f19565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161188891906131f9565b60405180910390a35050565b665c5edcbc2900003410156118bb5760405162461bcd60e51b81526004016108b9906136ae565b60006127756012546118cd9190613907565b90506118da838383612412565b6118e43382612161565b6000818152600f60209081526040909120855161190392870190612a0b565b506001601260008282546119179190613907565b909155505060405181907fe022f58b17edead5c8a541758e9b66796ebfbf27d6fd8044500f2468ac6e39fc90600090a250505050565b61195e611958611f19565b8361217b565b61197a5760405162461bcd60e51b81526004016108b9906137b1565b61198684848484612505565b50505050565b611994611f19565b6001600160a01b03166119a56117a8565b6001600160a01b0316146119cb5760405162461bcd60e51b81526004016108b9906135e1565b600e805460ff191682151517908190556040517f10e1c3fcaff06b68391033547e8f9bb8067d7c4a2e32659b0629153814d242d391611a0f9160ff909116906131f9565b60405180910390a150565b665c5edcbc29000081565b66f8b0a10e47000081565b6060611a3b82611efc565b611a575760405162461bcd60e51b81526004016108b99061365f565b6000828152600f602052604090208054611a7090613995565b80601f0160208091040260200160405190810160405280929190818152602001828054611a9c90613995565b8015611ae95780601f10611abe57610100808354040283529160200191611ae9565b820191906000526020600020905b815481529060010190602001808311611acc57829003601f168201915b50505050509050919050565b73a5dbc34d69b745d5ee9494e6960a811613b9ae3281565b611b15611f19565b6001600160a01b0316611b266117a8565b6001600160a01b031614611b4c5760405162461bcd60e51b81526004016108b9906135e1565b601154611b5b90612775613952565b611b66906001613907565b815114611b855760405162461bcd60e51b81526004016108b99061341b565b6011545b612775811015610971578160115482611ba29190613952565b81518110611bc057634e487b7160e01b600052603260045260246000fd5b6020026020010151600f600083601154611bda9190613907565b81526020019081526020016000209080519060200190611bfb929190612a0b565b50611c1281601154611c0d9190613907565b6120ad565b611c298382601154611c249190613907565b612161565b80611c33816139d0565b915050611b89565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60606000611c778484610976565b9050600081516001600160401b03811115611ca257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611cdb57816020015b611cc8612a8f565b815260200190600190039081611cc05790505b50905060005b8251811015611de257600b6000848381518110611d0e57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020018280548015611d9c57602002820191906000526020600020905b815481526020019060010190808311611d88575b505050505081525050828281518110611dc557634e487b7160e01b600052603260045260246000fd5b6020908102919091010152611ddb600182613907565b9050611ce1565b50949350505050565b611df3611f19565b6001600160a01b0316611e046117a8565b6001600160a01b031614611e2a5760405162461bcd60e51b81526004016108b9906135e1565b42600d55565b611e38611f19565b6001600160a01b0316611e496117a8565b6001600160a01b031614611e6f5760405162461bcd60e51b81526004016108b9906135e1565b6001600160a01b038116611e955760405162461bcd60e51b81526004016108b9906132b4565b61178e81612325565b6001600160a01b03166000908152600c602052604090205460ff1690565b60006001600160e01b031982166380ac58cd60e01b1480611eed57506001600160e01b03198216635b5e139f60e01b145b806107f857506107f882612538565b6000908152600260205260409020546001600160a01b0316151590565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611f5282611573565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b606081611fb057506040805180820190915260018152600360fc1b60208201526107fb565b8160005b8115611fda5780611fc4816139d0565b9150611fd39050600a8361391f565b9150611fb4565b6000816001600160401b0381111561200257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561202c576020820181803683370190505b5090505b84156120a557612041600183613952565b915061204e600a866139eb565b612059906030613907565b60f81b81838151811061207c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535061209e600a8661391f565b9450612030565b949350505050565b6040518060800160405280600081526020016000198152602001600019815260200160006001600160401b038111156120f657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561211f578160200160208202803683370190505b5090526000828152600b602090815260409182902083518155838201516001820155918301516002830155606083015180516119869260038501920190612ab7565b610c95828260405180602001604052806000815250612551565b600061218682611efc565b6121a25760405162461bcd60e51b81526004016108b9906133cf565b60006121ad83611573565b9050806001600160a01b0316846001600160a01b031614806121e85750836001600160a01b03166121dd84610892565b6001600160a01b0316145b806120a557506120a58185611c3b565b826001600160a01b031661220b82611573565b6001600160a01b0316146122315760405162461bcd60e51b81526004016108b990613616565b6001600160a01b0382166122575760405162461bcd60e51b81526004016108b990613331565b612262838383612584565b61226d600082611f1d565b6001600160a01b0383166000908152600360205260408120805460019290612296908490613952565b90915550506001600160a01b03821660009081526003602052604081208054600192906122c4908490613907565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006123838284613933565b9392505050565b6000612383828461391f565b6000826001600160a01b0316826040516123af90613132565b60006040518083038185875af1925050503d80600081146123ec576040519150601f19603f3d011682016040523d82523d6000602084013e6123f1565b606091505b50509050806109715760405162461bcd60e51b81526004016108b990613787565b60405180608001604052806000815260200184815260200183815260200160006001600160401b0381111561245757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612480578160200160208202803683370190505b5090526000828152600b602090815260409182902083518155838201516001820155918301516002830155606083015180516124c29260038501920190612ab7565b5050506000928352600b60209081526040808520600390810180546001818101835591885284882001859055948652908520018054938401815584529092200155565b6125108484846121f8565b61251c8484848461260d565b6119865760405162461bcd60e51b81526004016108b990613262565b6001600160e01b031981166301ffc9a760e01b14919050565b61255b8383612728565b612568600084848461260d565b6109715760405162461bcd60e51b81526004016108b990613262565b61258f838383610971565b6001600160a01b0383166125ab576125a681612807565b6125ce565b816001600160a01b0316836001600160a01b0316146125ce576125ce838261284b565b6001600160a01b0382166125ea576125e5816128e8565b610971565b826001600160a01b0316826001600160a01b0316146109715761097182826129c1565b6000612621846001600160a01b0316612a05565b1561271d57836001600160a01b031663150b7a0261263d611f19565b8786866040518563ffffffff1660e01b815260040161265f9493929190613149565b602060405180830381600087803b15801561267957600080fd5b505af19250505080156126a9575060408051601f3d908101601f191682019092526126a691810190612ef3565b60015b612703573d8080156126d7576040519150601f19603f3d011682016040523d82523d6000602084013e6126dc565b606091505b5080516126fb5760405162461bcd60e51b81526004016108b990613262565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506120a5565b506001949350505050565b6001600160a01b03821661274e5760405162461bcd60e51b81526004016108b99061353b565b61275781611efc565b156127745760405162461bcd60e51b81526004016108b9906132fa565b61278060008383612584565b6001600160a01b03821660009081526003602052604081208054600192906127a9908490613907565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b600060016128588461163c565b6128629190613952565b6000838152600760205260409020549091508082146128b5576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906128fa90600190613952565b6000838152600960205260408120546008805493945090928490811061293057634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806008838154811061295f57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806129a557634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006129cc8361163c565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b3b151590565b828054612a1790613995565b90600052602060002090601f016020900481019282612a395760008555612a7f565b82601f10612a5257805160ff1916838001178555612a7f565b82800160010185558215612a7f579182015b82811115612a7f578251825591602001919060010190612a64565b50612a8b929150612af1565b5090565b6040518060800160405280600081526020016000815260200160008152602001606081525090565b828054828255906000526020600020908101928215612a7f5791602002820182811115612a7f578251825591602001919060010190612a64565b5b80821115612a8b5760008155600101612af2565b60006001600160401b03831115612b1f57612b1f613a2b565b612b32601f8401601f19166020016138af565b9050828152838383011115612b4657600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b03811681146107fb57600080fd5b803580151581146107fb57600080fd5b600082601f830112612b94578081fd5b61238383833560208501612b06565b600060208284031215612bb4578081fd5b61238382612b5d565b60008060408385031215612bcf578081fd5b612bd883612b5d565b9150612be660208401612b5d565b90509250929050565b600080600060608486031215612c03578081fd5b612c0c84612b5d565b9250612c1a60208501612b5d565b9150604084013590509250925092565b60008060008060808587031215612c3f578081fd5b612c4885612b5d565b9350612c5660208601612b5d565b92506040850135915060608501356001600160401b03811115612c77578182fd5b8501601f81018713612c87578182fd5b612c9687823560208401612b06565b91505092959194509250565b60008060408385031215612cb4578182fd5b612cbd83612b5d565b91506020808401356001600160401b03811115612cd8578283fd5b8401601f81018613612ce8578283fd5b8035612cfb612cf6826138d8565b6138af565b81815283810190838501865b84811015612d3057612d1e8b888435890101612b84565b84529286019290860190600101612d07565b5096999098509650505050505050565b60008060408385031215612d52578182fd5b612d5b83612b5d565b9150612be660208401612b74565b60008060408385031215612d7b578182fd5b612d8483612b5d565b946020939093013593505050565b60006020808385031215612da4578182fd5b82356001600160401b03811115612db9578283fd5b8301601f81018513612dc9578283fd5b8035612dd7612cf6826138d8565b8181528381019083850185840285018601891015612df3578687fd5b8694505b83851015612e1c57612e0881612b5d565b835260019490940193918501918501612df7565b50979650505050505050565b60008060408385031215612e3a578182fd5b82356001600160401b03811115612e4f578283fd5b8301601f81018513612e5f578283fd5b80356020612e6f612cf6836138d8565b82815281810190848301838502860184018a1015612e8b578788fd5b8795505b84861015612ead578035835260019590950194918301918301612e8f565b5098969091013596505050505050565b600060208284031215612ece578081fd5b61238382612b74565b600060208284031215612ee8578081fd5b813561238381613a41565b600060208284031215612f04578081fd5b815161238381613a41565b600080600060608486031215612f23578081fd5b83356001600160401b03811115612f38578182fd5b612f4486828701612b84565b9660208601359650604090950135949350505050565b600060208284031215612f6b578081fd5b5035919050565b60008060408385031215612f84578182fd5b8235915060208301356001600160401b03811115612fa0578182fd5b612fac85828601612b84565b9150509250929050565b60008060408385031215612fc8578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b8381101561300657815187529582019590820190600101612fea565b509495945050505050565b60008151808452613029816020860160208601613969565b601f01601f19169290920160200192915050565b6000815161304f818560208601613969565b9290920192915050565b60008151835260208201516020840152604082015160408401526060820151608060608501526120a56080850182612fd7565b82546000908190600281046001808316806130a857607f831692505b60208084108214156130c857634e487b7160e01b87526022600452602487fd5b8180156130dc57600181146130ed57613119565b60ff19861689528489019650613119565b6130f68b6138fb565b885b868110156131115781548b8201529085019083016130f8565b505084890196505b505050505050613129818561303d565b95945050505050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061317c90830184613011565b9695505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156131d957603f198886030184526131c7858351613059565b945092850192908501906001016131ab565b5092979650505050505050565b6000602082526123836020830184612fd7565b901515815260200190565b6000602082526123836020830184613011565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201526a74206f6620626f756e647360a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b60208082526009908201526813585e081b1a5b5a5d60ba1b604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252601690820152750a8ded6cadcaae4d2e640e6d0deead8c840dac2e8c6d60531b604082015260600190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252600b908201526a14d85b194814185d5cd95960aa1b604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526011908201527056616c75652062656c6f7720707269636560781b604082015260600190565b6020808252600f908201526e105b1c9958591e481c995b5bdd9959608a1b604082015260600190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526024908201527f41646472657373206973206e6f7420696e636c7564656420696e207768697465604082015263131a5cdd60e21b606082015260800190565b60208082526010908201526f2a3930b739b332b9103330b4b632b21760811b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201526b7574206f6620626f756e647360a01b606082015260800190565b60208082526025908201527f596f7520646f6e27742068617665207769746864726177696e672070726976696040820152646c6564676560d81b606082015260800190565b6000602082526123836020830184613059565b90815260200190565b6040518181016001600160401b03811182821017156138d0576138d0613a2b565b604052919050565b60006001600160401b038211156138f1576138f1613a2b565b5060209081020190565b60009081526020902090565b6000821982111561391a5761391a6139ff565b500190565b60008261392e5761392e613a15565b500490565b600081600019048311821515161561394d5761394d6139ff565b500290565b600082821015613964576139646139ff565b500390565b60005b8381101561398457818101518382015260200161396c565b838111156119865750506000910152565b6002810460018216806139a957607f821691505b602082108114156139ca57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156139e4576139e46139ff565b5060010190565b6000826139fa576139fa613a15565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461178e57600080fdfea2646970667358221220dea4df40d1f99a3952a0a5d58a6629a49022bbae5975cb3a3dc3b8fb49b28a4964736f6c63430008000033",
  "deployedBytecode": "0x60806040526004361061027d5760003560e01c80636c26eab91161014f578063b88d4fde116100c1578063dc31d1d61161007a578063dc31d1d61461071e578063e985e9c51461073e578063eda9d4741461075e578063f0a65d1a1461077e578063f2fde38b14610793578063f99031a7146107b35761027d565b8063b88d4fde1461067f578063bedb86fb1461069f578063bf424e7e146106bf578063c002d23d146106d4578063c87b56dd146106e9578063d1d6222a146107095761027d565b8063853828b611610113578063853828b6146105f85780638d0419881461060d5780638da5cb5b1461062257806395d89b4114610637578063a22cb4651461064c578063aad665161461066c5761027d565b80636c26eab91461058457806370a0823114610599578063715018a6146105b9578063755cb234146105ce57806378e97925146105e35761027d565b806323b872dd116101f3578063438b6300116101ac578063438b6300146104da57806349ae8dc3146104fa5780634f6ccce71461051a578063594ebab71461053a5780636352211e1461054f5780636c0360eb1461056f5761027d565b806323b872dd1461040d5780632f745c591461042d578063372c12b11461044d5780633d99de851461046d578063414533de1461048d57806342842e0e146104ba5761027d565b8063105dacdf11610245578063105dacdf146103565780631249c58b14610376578063162094c41461037e57806318160ddd1461039e5780632042e5c2146103c057806321d80111146103e05761027d565b806301ffc9a71461028257806306fdde03146102b8578063081812fc146102da578063095ea7b3146103075780630970eaa314610329575b600080fd5b34801561028e57600080fd5b506102a261029d366004612ed7565b6107d3565b6040516102af91906131f9565b60405180910390f35b3480156102c457600080fd5b506102cd610800565b6040516102af9190613204565b3480156102e657600080fd5b506102fa6102f5366004612f5a565b610892565b6040516102af9190613135565b34801561031357600080fd5b50610327610322366004612d69565b6108de565b005b34801561033557600080fd5b50610349610344366004612fb6565b610976565b6040516102af91906131e6565b34801561036257600080fd5b50610327610371366004612d92565b610be0565b610327610c99565b34801561038a57600080fd5b50610327610399366004612f72565b610def565b3480156103aa57600080fd5b506103b3610e4d565b6040516102af91906138a6565b3480156103cc57600080fd5b506103276103db366004612ba3565b610e53565b3480156103ec57600080fd5b506104006103fb366004612f5a565b610eeb565b6040516102af9190613893565b34801561041957600080fd5b50610327610428366004612bef565b610f82565b34801561043957600080fd5b506103b3610448366004612d69565b610fba565b34801561045957600080fd5b506102a2610468366004612ba3565b61100c565b34801561047957600080fd5b506103b3610488366004612e28565b611021565b34801561049957600080fd5b506104ad6104a8366004612f5a565b61107f565b6040516102af9190613186565b3480156104c657600080fd5b506103276104d5366004612bef565b611262565b3480156104e657600080fd5b506103496104f5366004612ba3565b61127d565b34801561050657600080fd5b506104ad610515366004612f5a565b611373565b34801561052657600080fd5b506103b3610535366004612f5a565b611500565b34801561054657600080fd5b506102fa61155b565b34801561055b57600080fd5b506102fa61056a366004612f5a565b611573565b34801561057b57600080fd5b506102cd6115a8565b34801561059057600080fd5b506103b3611636565b3480156105a557600080fd5b506103b36105b4366004612ba3565b61163c565b3480156105c557600080fd5b50610327611680565b3480156105da57600080fd5b506103b36116cb565b3480156105ef57600080fd5b506103b36116d1565b34801561060457600080fd5b506103276116d7565b34801561061957600080fd5b506103b3611791565b34801561062e57600080fd5b506102fa6117a8565b34801561064357600080fd5b506102cd6117b7565b34801561065857600080fd5b50610327610667366004612d40565b6117c6565b61032761067a366004612f0f565b611894565b34801561068b57600080fd5b5061032761069a366004612c2a565b61194d565b3480156106ab57600080fd5b506103276106ba366004612ebd565b61198c565b3480156106cb57600080fd5b506103b3611a1a565b3480156106e057600080fd5b506103b3611a25565b3480156106f557600080fd5b506102cd610704366004612f5a565b611a30565b34801561071557600080fd5b506102fa611af5565b34801561072a57600080fd5b50610327610739366004612ca2565b611b0d565b34801561074a57600080fd5b506102a2610759366004612bbd565b611c3b565b34801561076a57600080fd5b506104ad610779366004612fb6565b611c69565b34801561078a57600080fd5b50610327611deb565b34801561079f57600080fd5b506103276107ae366004612ba3565b611e30565b3480156107bf57600080fd5b506102a26107ce366004612ba3565b611e9e565b60006001600160e01b0319821663780e9d6360e01b14806107f857506107f882611ebc565b90505b919050565b60606000805461080f90613995565b80601f016020809104026020016040519081016040528092919081815260200182805461083b90613995565b80156108885780601f1061085d57610100808354040283529160200191610888565b820191906000526020600020905b81548152906001019060200180831161086b57829003601f168201915b5050505050905090565b600061089d82611efc565b6108c25760405162461bcd60e51b81526004016108b990613595565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006108e982611573565b9050806001600160a01b0316836001600160a01b0316141561091d5760405162461bcd60e51b81526004016108b990613702565b806001600160a01b031661092f611f19565b6001600160a01b0316148061094b575061094b81610759611f19565b6109675760405162461bcd60e51b81526004016108b99061344b565b6109718383611f1d565b505050565b6000828152600b6020526040812060038101546060929081906001600160401b038111156109b457634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156109dd578160200160208202803683370190505b5090506000915060005b6003840154811015610b09576000868152600b6020908152604091829020600301805483518184028101840190945280845292610a8a929091908490830182828015610a5257602002820191906000526020600020905b815481526020019060010190808311610a3e575b5050505050866003018481548110610a7a57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154611021565b1015610af757836003018181548110610ab357634e487b7160e01b600052603260045260246000fd5b9060005260206000200154828480610aca906139d0565b955081518110610aea57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b610b02600182613907565b90506109e7565b506000826001600160401b03811115610b3257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b5b578160200160208202803683370190505b5090506000925060005b8251811015610bd357828181518110610b8e57634e487b7160e01b600052603260045260246000fd5b6020026020010151828281518110610bb657634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610bcc600182613907565b9050610b65565b5093505050505b92915050565b610be8611f19565b6001600160a01b0316610bf96117a8565b6001600160a01b031614610c1f5760405162461bcd60e51b81526004016108b9906135e1565b60005b8151811015610c95576001600c6000848481518110610c5157634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055610c8e600182613907565b9050610c22565b5050565b600e5460ff1615610cbc5760405162461bcd60e51b81526004016108b990613570565b600d54610ccb90613840613907565b4211610cf657610cda33611e9e565b610cf65760405162461bcd60e51b81526004016108b990613743565b61277560115410610d195760405162461bcd60e51b81526004016108b9906133ac565b66f8b0a10e470000341015610d405760405162461bcd60e51b81526004016108b9906136ae565b6010610d4d601154611f8b565b604051602001610d5e92919061308c565b60408051601f198184030181529181526011546000908152600f60209081529190208251610d9193919290910190612a0b565b50610d9d6011546120ad565b610da933601154612161565b6011546040517fe022f58b17edead5c8a541758e9b66796ebfbf27d6fd8044500f2468ac6e39fc90600090a2600160116000828254610de89190613907565b9091555050565b610df7611f19565b6001600160a01b0316610e086117a8565b6001600160a01b031614610e2e5760405162461bcd60e51b81526004016108b9906135e1565b6000828152600f60209081526040909120825161097192840190612a0b565b60085490565b610e5b611f19565b6001600160a01b0316610e6c6117a8565b6001600160a01b031614610e925760405162461bcd60e51b81526004016108b9906135e1565b6001600160a01b0381166000908152600c602052604090205460ff16610eca5760405162461bcd60e51b81526004016108b9906136d9565b6001600160a01b03166000908152600c60205260409020805460ff19169055565b610ef3612a8f565b6000828152600b60209081526040918290208251608081018452815481526001820154818401526002820154818501526003820180548551818602810186019096528086529194929360608601939290830182828015610f7257602002820191906000526020600020905b815481526020019060010190808311610f5e575b5050505050815250509050919050565b610f93610f8d611f19565b8261217b565b610faf5760405162461bcd60e51b81526004016108b9906137b1565b6109718383836121f8565b6000610fc58361163c565b8210610fe35760405162461bcd60e51b81526004016108b990613217565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600c6020526000908152604090205460ff1681565b6000805b8351811015611076578284828151811061104f57634e487b7160e01b600052603260045260246000fd5b60200260200101511415611064579050610bda565b61106f600182613907565b9050611025565b50509051919050565b6000818152600b60205260409020600181015460609182916000191461125b576040805160028082526060820190925290816020015b6110bd612a8f565b8152602001906001900390816110b5579050509150600b6000826001015481526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820180548060200260200160405190810160405280929190818152602001828054801561116157602002820191906000526020600020905b81548152602001906001019080831161114d575b5050505050815250508260008151811061118b57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250600b6000826002015481526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820180548060200260200160405190810160405280929190818152602001828054801561122557602002820191906000526020600020905b815481526020019060010190808311611211575b5050505050815250508260018151811061124f57634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b5092915050565b6109718383836040518060200160405280600081525061194d565b6060600061128a8361163c565b90506000816001600160401b038111156112b457634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156112dd578160200160208202803683370190505b5090506000806112eb610e4d565b905060005b8181101561136857866001600160a01b031661130e61056a83611500565b6001600160a01b0316141561135657808484611329816139d0565b95508151811061134957634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b80611360816139d0565b9150506112f0565b509195945050505050565b6000818152600b602052604081206003810154606092906001600160401b038111156113af57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156113e857816020015b6113d5612a8f565b8152602001906001900390816113cd5790505b50905060005b60038301548110156114f857600b600084600301838154811061142157634e487b7160e01b600052603260045260246000fd5b90600052602060002001548152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382018054806020026020016040519081016040528092919081815260200182805480156114b257602002820191906000526020600020905b81548152602001906001019080831161149e575b5050505050815250508282815181106114db57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526114f1600182613907565b90506113ee565b509392505050565b600061150a610e4d565b82106115285760405162461bcd60e51b81526004016108b990613802565b6008828154811061154957634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b73396823f49aa9f0e3fac4b939bc27ad5cd88264db81565b6000818152600260205260408120546001600160a01b0316806107f85760405162461bcd60e51b81526004016108b9906134f2565b601080546115b590613995565b80601f01602080910402602001604051908101604052809291908181526020018280546115e190613995565b801561162e5780601f106116035761010080835404028352916020019161162e565b820191906000526020600020905b81548152906001019060200180831161161157829003601f168201915b505050505081565b60115481565b60006001600160a01b0382166116645760405162461bcd60e51b81526004016108b9906134a8565b506001600160a01b031660009081526003602052604090205490565b611688611f19565b6001600160a01b03166116996117a8565b6001600160a01b0316146116bf5760405162461bcd60e51b81526004016108b9906135e1565b6116c96000612325565b565b61277581565b600d5481565b3373396823f49aa9f0e3fac4b939bc27ad5cd88264db148061170c57503373a5dbc34d69b745d5ee9494e6960a811613b9ae32145b6117285760405162461bcd60e51b81526004016108b99061384e565b478061173357600080fd5b61176673396823f49aa9f0e3fac4b939bc27ad5cd88264db611761606461175b856005612377565b9061238a565b612396565b61178e73a5dbc34d69b745d5ee9494e6960a811613b9ae32611761606461175b85605a612377565b50565b60006011546127756117a39190613952565b905090565b600a546001600160a01b031690565b60606001805461080f90613995565b6117ce611f19565b6001600160a01b0316826001600160a01b031614156117ff5760405162461bcd60e51b81526004016108b990613375565b806005600061180c611f19565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155611850611f19565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161188891906131f9565b60405180910390a35050565b665c5edcbc2900003410156118bb5760405162461bcd60e51b81526004016108b9906136ae565b60006127756012546118cd9190613907565b90506118da838383612412565b6118e43382612161565b6000818152600f60209081526040909120855161190392870190612a0b565b506001601260008282546119179190613907565b909155505060405181907fe022f58b17edead5c8a541758e9b66796ebfbf27d6fd8044500f2468ac6e39fc90600090a250505050565b61195e611958611f19565b8361217b565b61197a5760405162461bcd60e51b81526004016108b9906137b1565b61198684848484612505565b50505050565b611994611f19565b6001600160a01b03166119a56117a8565b6001600160a01b0316146119cb5760405162461bcd60e51b81526004016108b9906135e1565b600e805460ff191682151517908190556040517f10e1c3fcaff06b68391033547e8f9bb8067d7c4a2e32659b0629153814d242d391611a0f9160ff909116906131f9565b60405180910390a150565b665c5edcbc29000081565b66f8b0a10e47000081565b6060611a3b82611efc565b611a575760405162461bcd60e51b81526004016108b99061365f565b6000828152600f602052604090208054611a7090613995565b80601f0160208091040260200160405190810160405280929190818152602001828054611a9c90613995565b8015611ae95780601f10611abe57610100808354040283529160200191611ae9565b820191906000526020600020905b815481529060010190602001808311611acc57829003601f168201915b50505050509050919050565b73a5dbc34d69b745d5ee9494e6960a811613b9ae3281565b611b15611f19565b6001600160a01b0316611b266117a8565b6001600160a01b031614611b4c5760405162461bcd60e51b81526004016108b9906135e1565b601154611b5b90612775613952565b611b66906001613907565b815114611b855760405162461bcd60e51b81526004016108b99061341b565b6011545b612775811015610971578160115482611ba29190613952565b81518110611bc057634e487b7160e01b600052603260045260246000fd5b6020026020010151600f600083601154611bda9190613907565b81526020019081526020016000209080519060200190611bfb929190612a0b565b50611c1281601154611c0d9190613907565b6120ad565b611c298382601154611c249190613907565b612161565b80611c33816139d0565b915050611b89565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60606000611c778484610976565b9050600081516001600160401b03811115611ca257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611cdb57816020015b611cc8612a8f565b815260200190600190039081611cc05790505b50905060005b8251811015611de257600b6000848381518110611d0e57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020018280548015611d9c57602002820191906000526020600020905b815481526020019060010190808311611d88575b505050505081525050828281518110611dc557634e487b7160e01b600052603260045260246000fd5b6020908102919091010152611ddb600182613907565b9050611ce1565b50949350505050565b611df3611f19565b6001600160a01b0316611e046117a8565b6001600160a01b031614611e2a5760405162461bcd60e51b81526004016108b9906135e1565b42600d55565b611e38611f19565b6001600160a01b0316611e496117a8565b6001600160a01b031614611e6f5760405162461bcd60e51b81526004016108b9906135e1565b6001600160a01b038116611e955760405162461bcd60e51b81526004016108b9906132b4565b61178e81612325565b6001600160a01b03166000908152600c602052604090205460ff1690565b60006001600160e01b031982166380ac58cd60e01b1480611eed57506001600160e01b03198216635b5e139f60e01b145b806107f857506107f882612538565b6000908152600260205260409020546001600160a01b0316151590565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611f5282611573565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b606081611fb057506040805180820190915260018152600360fc1b60208201526107fb565b8160005b8115611fda5780611fc4816139d0565b9150611fd39050600a8361391f565b9150611fb4565b6000816001600160401b0381111561200257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561202c576020820181803683370190505b5090505b84156120a557612041600183613952565b915061204e600a866139eb565b612059906030613907565b60f81b81838151811061207c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535061209e600a8661391f565b9450612030565b949350505050565b6040518060800160405280600081526020016000198152602001600019815260200160006001600160401b038111156120f657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561211f578160200160208202803683370190505b5090526000828152600b602090815260409182902083518155838201516001820155918301516002830155606083015180516119869260038501920190612ab7565b610c95828260405180602001604052806000815250612551565b600061218682611efc565b6121a25760405162461bcd60e51b81526004016108b9906133cf565b60006121ad83611573565b9050806001600160a01b0316846001600160a01b031614806121e85750836001600160a01b03166121dd84610892565b6001600160a01b0316145b806120a557506120a58185611c3b565b826001600160a01b031661220b82611573565b6001600160a01b0316146122315760405162461bcd60e51b81526004016108b990613616565b6001600160a01b0382166122575760405162461bcd60e51b81526004016108b990613331565b612262838383612584565b61226d600082611f1d565b6001600160a01b0383166000908152600360205260408120805460019290612296908490613952565b90915550506001600160a01b03821660009081526003602052604081208054600192906122c4908490613907565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006123838284613933565b9392505050565b6000612383828461391f565b6000826001600160a01b0316826040516123af90613132565b60006040518083038185875af1925050503d80600081146123ec576040519150601f19603f3d011682016040523d82523d6000602084013e6123f1565b606091505b50509050806109715760405162461bcd60e51b81526004016108b990613787565b60405180608001604052806000815260200184815260200183815260200160006001600160401b0381111561245757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612480578160200160208202803683370190505b5090526000828152600b602090815260409182902083518155838201516001820155918301516002830155606083015180516124c29260038501920190612ab7565b5050506000928352600b60209081526040808520600390810180546001818101835591885284882001859055948652908520018054938401815584529092200155565b6125108484846121f8565b61251c8484848461260d565b6119865760405162461bcd60e51b81526004016108b990613262565b6001600160e01b031981166301ffc9a760e01b14919050565b61255b8383612728565b612568600084848461260d565b6109715760405162461bcd60e51b81526004016108b990613262565b61258f838383610971565b6001600160a01b0383166125ab576125a681612807565b6125ce565b816001600160a01b0316836001600160a01b0316146125ce576125ce838261284b565b6001600160a01b0382166125ea576125e5816128e8565b610971565b826001600160a01b0316826001600160a01b0316146109715761097182826129c1565b6000612621846001600160a01b0316612a05565b1561271d57836001600160a01b031663150b7a0261263d611f19565b8786866040518563ffffffff1660e01b815260040161265f9493929190613149565b602060405180830381600087803b15801561267957600080fd5b505af19250505080156126a9575060408051601f3d908101601f191682019092526126a691810190612ef3565b60015b612703573d8080156126d7576040519150601f19603f3d011682016040523d82523d6000602084013e6126dc565b606091505b5080516126fb5760405162461bcd60e51b81526004016108b990613262565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506120a5565b506001949350505050565b6001600160a01b03821661274e5760405162461bcd60e51b81526004016108b99061353b565b61275781611efc565b156127745760405162461bcd60e51b81526004016108b9906132fa565b61278060008383612584565b6001600160a01b03821660009081526003602052604081208054600192906127a9908490613907565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b600060016128588461163c565b6128629190613952565b6000838152600760205260409020549091508082146128b5576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906128fa90600190613952565b6000838152600960205260408120546008805493945090928490811061293057634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806008838154811061295f57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806129a557634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006129cc8361163c565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b3b151590565b828054612a1790613995565b90600052602060002090601f016020900481019282612a395760008555612a7f565b82601f10612a5257805160ff1916838001178555612a7f565b82800160010185558215612a7f579182015b82811115612a7f578251825591602001919060010190612a64565b50612a8b929150612af1565b5090565b6040518060800160405280600081526020016000815260200160008152602001606081525090565b828054828255906000526020600020908101928215612a7f5791602002820182811115612a7f578251825591602001919060010190612a64565b5b80821115612a8b5760008155600101612af2565b60006001600160401b03831115612b1f57612b1f613a2b565b612b32601f8401601f19166020016138af565b9050828152838383011115612b4657600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b03811681146107fb57600080fd5b803580151581146107fb57600080fd5b600082601f830112612b94578081fd5b61238383833560208501612b06565b600060208284031215612bb4578081fd5b61238382612b5d565b60008060408385031215612bcf578081fd5b612bd883612b5d565b9150612be660208401612b5d565b90509250929050565b600080600060608486031215612c03578081fd5b612c0c84612b5d565b9250612c1a60208501612b5d565b9150604084013590509250925092565b60008060008060808587031215612c3f578081fd5b612c4885612b5d565b9350612c5660208601612b5d565b92506040850135915060608501356001600160401b03811115612c77578182fd5b8501601f81018713612c87578182fd5b612c9687823560208401612b06565b91505092959194509250565b60008060408385031215612cb4578182fd5b612cbd83612b5d565b91506020808401356001600160401b03811115612cd8578283fd5b8401601f81018613612ce8578283fd5b8035612cfb612cf6826138d8565b6138af565b81815283810190838501865b84811015612d3057612d1e8b888435890101612b84565b84529286019290860190600101612d07565b5096999098509650505050505050565b60008060408385031215612d52578182fd5b612d5b83612b5d565b9150612be660208401612b74565b60008060408385031215612d7b578182fd5b612d8483612b5d565b946020939093013593505050565b60006020808385031215612da4578182fd5b82356001600160401b03811115612db9578283fd5b8301601f81018513612dc9578283fd5b8035612dd7612cf6826138d8565b8181528381019083850185840285018601891015612df3578687fd5b8694505b83851015612e1c57612e0881612b5d565b835260019490940193918501918501612df7565b50979650505050505050565b60008060408385031215612e3a578182fd5b82356001600160401b03811115612e4f578283fd5b8301601f81018513612e5f578283fd5b80356020612e6f612cf6836138d8565b82815281810190848301838502860184018a1015612e8b578788fd5b8795505b84861015612ead578035835260019590950194918301918301612e8f565b5098969091013596505050505050565b600060208284031215612ece578081fd5b61238382612b74565b600060208284031215612ee8578081fd5b813561238381613a41565b600060208284031215612f04578081fd5b815161238381613a41565b600080600060608486031215612f23578081fd5b83356001600160401b03811115612f38578182fd5b612f4486828701612b84565b9660208601359650604090950135949350505050565b600060208284031215612f6b578081fd5b5035919050565b60008060408385031215612f84578182fd5b8235915060208301356001600160401b03811115612fa0578182fd5b612fac85828601612b84565b9150509250929050565b60008060408385031215612fc8578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b8381101561300657815187529582019590820190600101612fea565b509495945050505050565b60008151808452613029816020860160208601613969565b601f01601f19169290920160200192915050565b6000815161304f818560208601613969565b9290920192915050565b60008151835260208201516020840152604082015160408401526060820151608060608501526120a56080850182612fd7565b82546000908190600281046001808316806130a857607f831692505b60208084108214156130c857634e487b7160e01b87526022600452602487fd5b8180156130dc57600181146130ed57613119565b60ff19861689528489019650613119565b6130f68b6138fb565b885b868110156131115781548b8201529085019083016130f8565b505084890196505b505050505050613129818561303d565b95945050505050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061317c90830184613011565b9695505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156131d957603f198886030184526131c7858351613059565b945092850192908501906001016131ab565b5092979650505050505050565b6000602082526123836020830184612fd7565b901515815260200190565b6000602082526123836020830184613011565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201526a74206f6620626f756e647360a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b60208082526009908201526813585e081b1a5b5a5d60ba1b604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252601690820152750a8ded6cadcaae4d2e640e6d0deead8c840dac2e8c6d60531b604082015260600190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252600b908201526a14d85b194814185d5cd95960aa1b604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526011908201527056616c75652062656c6f7720707269636560781b604082015260600190565b6020808252600f908201526e105b1c9958591e481c995b5bdd9959608a1b604082015260600190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526024908201527f41646472657373206973206e6f7420696e636c7564656420696e207768697465604082015263131a5cdd60e21b606082015260800190565b60208082526010908201526f2a3930b739b332b9103330b4b632b21760811b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201526b7574206f6620626f756e647360a01b606082015260800190565b60208082526025908201527f596f7520646f6e27742068617665207769746864726177696e672070726976696040820152646c6564676560d81b606082015260800190565b6000602082526123836020830184613059565b90815260200190565b6040518181016001600160401b03811182821017156138d0576138d0613a2b565b604052919050565b60006001600160401b038211156138f1576138f1613a2b565b5060209081020190565b60009081526020902090565b6000821982111561391a5761391a6139ff565b500190565b60008261392e5761392e613a15565b500490565b600081600019048311821515161561394d5761394d6139ff565b500290565b600082821015613964576139646139ff565b500390565b60005b8381101561398457818101518382015260200161396c565b838111156119865750506000910152565b6002810460018216806139a957607f821691505b602082108114156139ca57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156139e4576139e46139ff565b5060010190565b6000826139fa576139fa613a15565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461178e57600080fdfea2646970667358221220dea4df40d1f99a3952a0a5d58a6629a49022bbae5975cb3a3dc3b8fb49b28a4964736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 129,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 131,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 135,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 139,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 143,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 149,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1068,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1072,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1075,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1079,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2915,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_heros",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Hero)2910_storage)"
      },
      {
        "astId": 2357,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "whiteList",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2359,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "startTime",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2362,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "bPaused",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2366,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "_tokenUris",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2368,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "baseURI",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      },
      {
        "astId": 2371,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "mintedInitialTokenCount",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2374,
        "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
        "label": "breedTokenCount",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Hero)2910_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct HeroFactory.Hero)",
        "numberOfBytes": "32",
        "value": "t_struct(Hero)2910_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Hero)2910_storage": {
        "encoding": "inplace",
        "label": "struct HeroFactory.Hero",
        "members": [
          {
            "astId": 2902,
            "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
            "label": "traits",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2904,
            "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
            "label": "fatherId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2906,
            "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
            "label": "motherId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2909,
            "contract": "contracts/BrainDanceNft.sol:BrainDanceNft",
            "label": "childrenIds",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}